<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="243"><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.82%)</title><rect x="0.0000%" y="613" width="0.8230%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;&amp;[&amp;T: 5] as rusqlite::params::Params&gt;::__bind_in (1 samples, 0.41%)</title><rect x="0.8230%" y="597" width="0.4115%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="1.0730%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.41%)</title><rect x="1.2346%" y="597" width="0.4115%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="1.4846%" y="607.50"></text></g><g><title>allocateCursor (1 samples, 0.41%)</title><rect x="1.6461%" y="597" width="0.4115%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="1.8961%" y="607.50"></text></g><g><title>dbReallocFinish (1 samples, 0.41%)</title><rect x="2.0576%" y="597" width="0.4115%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="2.3076%" y="607.50"></text></g><g><title>resolveExprStep (1 samples, 0.41%)</title><rect x="2.4691%" y="597" width="0.4115%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="2.7191%" y="607.50"></text></g><g><title>rusqlite::inner_connection::InnerConnection::prepare (1 samples, 0.41%)</title><rect x="2.8807%" y="597" width="0.4115%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="3.1307%" y="607.50"></text></g><g><title>rusqlite::statement::Statement::execute_with_bound_parameters (1 samples, 0.41%)</title><rect x="3.2922%" y="597" width="0.4115%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="3.5422%" y="607.50"></text></g><g><title>sqlite3BtreeBeginTrans (1 samples, 0.41%)</title><rect x="3.7037%" y="597" width="0.4115%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="3.9537%" y="607.50"></text></g><g><title>sqlite3CompleteInsertion (1 samples, 0.41%)</title><rect x="4.1152%" y="597" width="0.4115%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="4.3652%" y="607.50"></text></g><g><title>sqlite3OpenTable (1 samples, 0.41%)</title><rect x="4.5267%" y="597" width="0.4115%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="1"/><text x="4.7767%" y="607.50"></text></g><g><title>sqlite3VdbeHalt (1 samples, 0.41%)</title><rect x="4.9383%" y="597" width="0.4115%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="1"/><text x="5.1883%" y="607.50"></text></g><g><title>[[heap]] (12 samples, 4.94%)</title><rect x="0.8230%" y="613" width="4.9383%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="12"/><text x="1.0730%" y="623.50">[[heap..</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.41%)</title><rect x="5.3498%" y="597" width="0.4115%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="1"/><text x="5.5998%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="613" width="0.4115%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="1"/><text x="6.0113%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="597" width="0.4115%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="1"/><text x="6.0113%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="581" width="0.4115%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="1"/><text x="6.0113%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="565" width="0.4115%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="1"/><text x="6.0113%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="549" width="0.4115%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="1"/><text x="6.0113%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="533" width="0.4115%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="1"/><text x="6.0113%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="517" width="0.4115%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="1"/><text x="6.0113%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="501" width="0.4115%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="1"/><text x="6.0113%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="485" width="0.4115%" height="15" fill="rgb(221,5,38)" fg:x="14" fg:w="1"/><text x="6.0113%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="469" width="0.4115%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="1"/><text x="6.0113%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="453" width="0.4115%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="1"/><text x="6.0113%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="5.7613%" y="437" width="0.4115%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="1"/><text x="6.0113%" y="447.50"></text></g><g><title>&lt;&amp;[&amp;T: 5] as rusqlite::params::Params&gt;::__bind_in (1 samples, 0.41%)</title><rect x="6.1728%" y="597" width="0.4115%" height="15" fill="rgb(225,111,53)" fg:x="15" fg:w="1"/><text x="6.4228%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.41%)</title><rect x="6.5844%" y="597" width="0.4115%" height="15" fill="rgb(238,160,17)" fg:x="16" fg:w="1"/><text x="6.8344%" y="607.50"></text></g><g><title>resolveExprStep (1 samples, 0.41%)</title><rect x="6.9959%" y="597" width="0.4115%" height="15" fill="rgb(214,148,48)" fg:x="17" fg:w="1"/><text x="7.2459%" y="607.50"></text></g><g><title>sqlite3ExprListAppendNew (1 samples, 0.41%)</title><rect x="7.4074%" y="597" width="0.4115%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="1"/><text x="7.6574%" y="607.50"></text></g><g><title>sqlite3FinishCoding (1 samples, 0.41%)</title><rect x="7.8189%" y="597" width="0.4115%" height="15" fill="rgb(209,103,24)" fg:x="19" fg:w="1"/><text x="8.0689%" y="607.50"></text></g><g><title>sqlite3Insert (1 samples, 0.41%)</title><rect x="8.2305%" y="597" width="0.4115%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="1"/><text x="8.4805%" y="607.50"></text></g><g><title>[[stack]] (10 samples, 4.12%)</title><rect x="6.1728%" y="613" width="4.1152%" height="15" fill="rgb(213,181,19)" fg:x="15" fg:w="10"/><text x="6.4228%" y="623.50">[[st..</text></g><g><title>sqlite3RunParser (4 samples, 1.65%)</title><rect x="8.6420%" y="597" width="1.6461%" height="15" fill="rgb(254,191,54)" fg:x="21" fg:w="4"/><text x="8.8920%" y="607.50"></text></g><g><title>_int_free (2 samples, 0.82%)</title><rect x="10.2881%" y="597" width="0.8230%" height="15" fill="rgb(241,83,37)" fg:x="25" fg:w="2"/><text x="10.5381%" y="607.50"></text></g><g><title>_int_realloc (1 samples, 0.41%)</title><rect x="11.1111%" y="597" width="0.4115%" height="15" fill="rgb(233,36,39)" fg:x="27" fg:w="1"/><text x="11.3611%" y="607.50"></text></g><g><title>keywordCode.part.0.constprop.0 (1 samples, 0.41%)</title><rect x="11.5226%" y="597" width="0.4115%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="1"/><text x="11.7726%" y="607.50"></text></g><g><title>rusqlite::str_for_sqlite (1 samples, 0.41%)</title><rect x="11.9342%" y="597" width="0.4115%" height="15" fill="rgb(245,192,40)" fg:x="29" fg:w="1"/><text x="12.1842%" y="607.50"></text></g><g><title>sqlite3ExprDeleteNN (1 samples, 0.41%)</title><rect x="12.3457%" y="597" width="0.4115%" height="15" fill="rgb(238,167,29)" fg:x="30" fg:w="1"/><text x="12.5957%" y="607.50"></text></g><g><title>sqlite3GetToken (1 samples, 0.41%)</title><rect x="12.7572%" y="597" width="0.4115%" height="15" fill="rgb(232,182,51)" fg:x="31" fg:w="1"/><text x="13.0072%" y="607.50"></text></g><g><title>sqlite3VdbeMemSetStr (1 samples, 0.41%)</title><rect x="13.1687%" y="597" width="0.4115%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="1"/><text x="13.4187%" y="607.50"></text></g><g><title>sqlite3_bind_text (3 samples, 1.23%)</title><rect x="13.5802%" y="597" width="1.2346%" height="15" fill="rgb(208,69,12)" fg:x="33" fg:w="3"/><text x="13.8302%" y="607.50"></text></g><g><title>[unknown] (12 samples, 4.94%)</title><rect x="10.2881%" y="613" width="4.9383%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="12"/><text x="10.5381%" y="623.50">[unkno..</text></g><g><title>tokenExpr (1 samples, 0.41%)</title><rect x="14.8148%" y="597" width="0.4115%" height="15" fill="rgb(213,116,39)" fg:x="36" fg:w="1"/><text x="15.0648%" y="607.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.41%)</title><rect x="15.2263%" y="613" width="0.4115%" height="15" fill="rgb(222,207,29)" fg:x="37" fg:w="1"/><text x="15.4763%" y="623.50"></text></g><g><title>rusqlite::str_for_sqlite (1 samples, 0.41%)</title><rect x="16.4609%" y="325" width="0.4115%" height="15" fill="rgb(206,96,30)" fg:x="40" fg:w="1"/><text x="16.7109%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.41%)</title><rect x="17.6955%" y="293" width="0.4115%" height="15" fill="rgb(218,138,4)" fg:x="43" fg:w="1"/><text x="17.9455%" y="303.50"></text></g><g><title>&lt;&amp;[&amp;T: 5] as rusqlite::params::Params&gt;::__bind_in (7 samples, 2.88%)</title><rect x="16.0494%" y="357" width="2.8807%" height="15" fill="rgb(250,191,14)" fg:x="39" fg:w="7"/><text x="16.2994%" y="367.50">&lt;&amp;..</text></g><g><title>rusqlite::statement::Statement::bind_parameter (7 samples, 2.88%)</title><rect x="16.0494%" y="341" width="2.8807%" height="15" fill="rgb(239,60,40)" fg:x="39" fg:w="7"/><text x="16.2994%" y="351.50">ru..</text></g><g><title>sqlite3_bind_text (5 samples, 2.06%)</title><rect x="16.8724%" y="325" width="2.0576%" height="15" fill="rgb(206,27,48)" fg:x="41" fg:w="5"/><text x="17.1224%" y="335.50">s..</text></g><g><title>sqlite3VdbeMemSetStr (4 samples, 1.65%)</title><rect x="17.2840%" y="309" width="1.6461%" height="15" fill="rgb(225,35,8)" fg:x="42" fg:w="4"/><text x="17.5340%" y="319.50"></text></g><g><title>sqlite3VdbeMemGrow (2 samples, 0.82%)</title><rect x="18.1070%" y="293" width="0.8230%" height="15" fill="rgb(250,213,24)" fg:x="44" fg:w="2"/><text x="18.3570%" y="303.50"></text></g><g><title>sqlite3DbMallocRawNN (1 samples, 0.41%)</title><rect x="18.5185%" y="277" width="0.4115%" height="15" fill="rgb(247,123,22)" fg:x="45" fg:w="1"/><text x="18.7685%" y="287.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 1.23%)</title><rect x="20.1646%" y="309" width="1.2346%" height="15" fill="rgb(231,138,38)" fg:x="49" fg:w="3"/><text x="20.4146%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 1.23%)</title><rect x="20.1646%" y="293" width="1.2346%" height="15" fill="rgb(231,145,46)" fg:x="49" fg:w="3"/><text x="20.4146%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 1.23%)</title><rect x="20.1646%" y="277" width="1.2346%" height="15" fill="rgb(251,118,11)" fg:x="49" fg:w="3"/><text x="20.4146%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 1.23%)</title><rect x="20.1646%" y="261" width="1.2346%" height="15" fill="rgb(217,147,25)" fg:x="49" fg:w="3"/><text x="20.4146%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 1.23%)</title><rect x="20.1646%" y="245" width="1.2346%" height="15" fill="rgb(247,81,37)" fg:x="49" fg:w="3"/><text x="20.4146%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 1.23%)</title><rect x="20.1646%" y="229" width="1.2346%" height="15" fill="rgb(209,12,38)" fg:x="49" fg:w="3"/><text x="20.4146%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 1.23%)</title><rect x="20.1646%" y="213" width="1.2346%" height="15" fill="rgb(227,1,9)" fg:x="49" fg:w="3"/><text x="20.4146%" y="223.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 1.23%)</title><rect x="20.1646%" y="197" width="1.2346%" height="15" fill="rgb(248,47,43)" fg:x="49" fg:w="3"/><text x="20.4146%" y="207.50"></text></g><g><title>__GI___libc_malloc (3 samples, 1.23%)</title><rect x="20.1646%" y="181" width="1.2346%" height="15" fill="rgb(221,10,30)" fg:x="49" fg:w="3"/><text x="20.4146%" y="191.50"></text></g><g><title>tcache_get (2 samples, 0.82%)</title><rect x="20.5761%" y="165" width="0.8230%" height="15" fill="rgb(210,229,1)" fg:x="50" fg:w="2"/><text x="20.8261%" y="175.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.41%)</title><rect x="21.3992%" y="309" width="0.4115%" height="15" fill="rgb(222,148,37)" fg:x="52" fg:w="1"/><text x="21.6492%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.41%)</title><rect x="21.3992%" y="293" width="0.4115%" height="15" fill="rgb(234,67,33)" fg:x="52" fg:w="1"/><text x="21.6492%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.41%)</title><rect x="21.3992%" y="277" width="0.4115%" height="15" fill="rgb(247,98,35)" fg:x="52" fg:w="1"/><text x="21.6492%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.41%)</title><rect x="21.3992%" y="261" width="0.4115%" height="15" fill="rgb(247,138,52)" fg:x="52" fg:w="1"/><text x="21.6492%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.41%)</title><rect x="21.3992%" y="245" width="0.4115%" height="15" fill="rgb(213,79,30)" fg:x="52" fg:w="1"/><text x="21.6492%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.41%)</title><rect x="21.3992%" y="229" width="0.4115%" height="15" fill="rgb(246,177,23)" fg:x="52" fg:w="1"/><text x="21.6492%" y="239.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.41%)</title><rect x="21.3992%" y="213" width="0.4115%" height="15" fill="rgb(230,62,27)" fg:x="52" fg:w="1"/><text x="21.6492%" y="223.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.41%)</title><rect x="23.0453%" y="277" width="0.4115%" height="15" fill="rgb(216,154,8)" fg:x="56" fg:w="1"/><text x="23.2953%" y="287.50"></text></g><g><title>_int_realloc (2 samples, 0.82%)</title><rect x="25.1029%" y="37" width="0.8230%" height="15" fill="rgb(244,35,45)" fg:x="61" fg:w="2"/><text x="25.3529%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 2.88%)</title><rect x="23.4568%" y="181" width="2.8807%" height="15" fill="rgb(251,115,12)" fg:x="57" fg:w="7"/><text x="23.7068%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 2.88%)</title><rect x="23.4568%" y="165" width="2.8807%" height="15" fill="rgb(240,54,50)" fg:x="57" fg:w="7"/><text x="23.7068%" y="175.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 2.47%)</title><rect x="23.8683%" y="149" width="2.4691%" height="15" fill="rgb(233,84,52)" fg:x="58" fg:w="6"/><text x="24.1183%" y="159.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 2.47%)</title><rect x="23.8683%" y="133" width="2.4691%" height="15" fill="rgb(207,117,47)" fg:x="58" fg:w="6"/><text x="24.1183%" y="143.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 2.47%)</title><rect x="23.8683%" y="117" width="2.4691%" height="15" fill="rgb(249,43,39)" fg:x="58" fg:w="6"/><text x="24.1183%" y="127.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 2.47%)</title><rect x="23.8683%" y="101" width="2.4691%" height="15" fill="rgb(209,38,44)" fg:x="58" fg:w="6"/><text x="24.1183%" y="111.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 2.47%)</title><rect x="23.8683%" y="85" width="2.4691%" height="15" fill="rgb(236,212,23)" fg:x="58" fg:w="6"/><text x="24.1183%" y="95.50">al..</text></g><g><title>alloc::alloc::realloc (6 samples, 2.47%)</title><rect x="23.8683%" y="69" width="2.4691%" height="15" fill="rgb(242,79,21)" fg:x="58" fg:w="6"/><text x="24.1183%" y="79.50">al..</text></g><g><title>__GI___libc_realloc (6 samples, 2.47%)</title><rect x="23.8683%" y="53" width="2.4691%" height="15" fill="rgb(211,96,35)" fg:x="58" fg:w="6"/><text x="24.1183%" y="63.50">__..</text></g><g><title>checked_request2size (1 samples, 0.41%)</title><rect x="25.9259%" y="37" width="0.4115%" height="15" fill="rgb(253,215,40)" fg:x="63" fg:w="1"/><text x="26.1759%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 4.53%)</title><rect x="23.4568%" y="277" width="4.5267%" height="15" fill="rgb(211,81,21)" fg:x="57" fg:w="11"/><text x="23.7068%" y="287.50">&lt;&amp;mut..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11 samples, 4.53%)</title><rect x="23.4568%" y="261" width="4.5267%" height="15" fill="rgb(208,190,38)" fg:x="57" fg:w="11"/><text x="23.7068%" y="271.50">&lt;allo..</text></g><g><title>alloc::string::String::push_str (11 samples, 4.53%)</title><rect x="23.4568%" y="245" width="4.5267%" height="15" fill="rgb(235,213,38)" fg:x="57" fg:w="11"/><text x="23.7068%" y="255.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 4.53%)</title><rect x="23.4568%" y="229" width="4.5267%" height="15" fill="rgb(237,122,38)" fg:x="57" fg:w="11"/><text x="23.7068%" y="239.50">alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 4.53%)</title><rect x="23.4568%" y="213" width="4.5267%" height="15" fill="rgb(244,218,35)" fg:x="57" fg:w="11"/><text x="23.7068%" y="223.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 4.53%)</title><rect x="23.4568%" y="197" width="4.5267%" height="15" fill="rgb(240,68,47)" fg:x="57" fg:w="11"/><text x="23.7068%" y="207.50">alloc..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 1.65%)</title><rect x="26.3374%" y="181" width="1.6461%" height="15" fill="rgb(210,16,53)" fg:x="64" fg:w="4"/><text x="26.5874%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 1.65%)</title><rect x="26.3374%" y="165" width="1.6461%" height="15" fill="rgb(235,124,12)" fg:x="64" fg:w="4"/><text x="26.5874%" y="175.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.41%)</title><rect x="27.9835%" y="277" width="0.4115%" height="15" fill="rgb(224,169,11)" fg:x="68" fg:w="1"/><text x="28.2335%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 9.88%)</title><rect x="18.9300%" y="357" width="9.8765%" height="15" fill="rgb(250,166,2)" fg:x="46" fg:w="24"/><text x="19.1800%" y="367.50">&lt;alloc::vec::V..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 9.88%)</title><rect x="18.9300%" y="341" width="9.8765%" height="15" fill="rgb(242,216,29)" fg:x="46" fg:w="24"/><text x="19.1800%" y="351.50">&lt;core::iter::a..</text></g><g><title>alloc::fmt::format::format_inner (21 samples, 8.64%)</title><rect x="20.1646%" y="325" width="8.6420%" height="15" fill="rgb(230,116,27)" fg:x="49" fg:w="21"/><text x="20.4146%" y="335.50">alloc::fmt::..</text></g><g><title>core::fmt::Write::write_fmt (17 samples, 7.00%)</title><rect x="21.8107%" y="309" width="6.9959%" height="15" fill="rgb(228,99,48)" fg:x="53" fg:w="17"/><text x="22.0607%" y="319.50">core::fmt..</text></g><g><title>core::fmt::write (17 samples, 7.00%)</title><rect x="21.8107%" y="293" width="6.9959%" height="15" fill="rgb(253,11,6)" fg:x="53" fg:w="17"/><text x="22.0607%" y="303.50">core::fmt..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.41%)</title><rect x="28.3951%" y="277" width="0.4115%" height="15" fill="rgb(247,143,39)" fg:x="69" fg:w="1"/><text x="28.6451%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.41%)</title><rect x="28.3951%" y="261" width="0.4115%" height="15" fill="rgb(236,97,10)" fg:x="69" fg:w="1"/><text x="28.6451%" y="271.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.82%)</title><rect x="30.0412%" y="341" width="0.8230%" height="15" fill="rgb(233,208,19)" fg:x="73" fg:w="2"/><text x="30.2912%" y="351.50"></text></g><g><title>checked_request2size (1 samples, 0.41%)</title><rect x="30.4527%" y="325" width="0.4115%" height="15" fill="rgb(216,164,2)" fg:x="74" fg:w="1"/><text x="30.7027%" y="335.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 3.29%)</title><rect x="28.8066%" y="357" width="3.2922%" height="15" fill="rgb(220,129,5)" fg:x="70" fg:w="8"/><text x="29.0566%" y="367.50">&lt;cs..</text></g><g><title>csv_core::reader::Reader::read_record (3 samples, 1.23%)</title><rect x="30.8642%" y="341" width="1.2346%" height="15" fill="rgb(242,17,10)" fg:x="75" fg:w="3"/><text x="31.1142%" y="351.50"></text></g><g><title>__GI___libc_free (8 samples, 3.29%)</title><rect x="32.0988%" y="357" width="3.2922%" height="15" fill="rgb(242,107,0)" fg:x="78" fg:w="8"/><text x="32.3488%" y="367.50">__G..</text></g><g><title>_int_free (7 samples, 2.88%)</title><rect x="32.5103%" y="341" width="2.8807%" height="15" fill="rgb(251,28,31)" fg:x="79" fg:w="7"/><text x="32.7603%" y="351.50">_i..</text></g><g><title>__rdl_dealloc (1 samples, 0.41%)</title><rect x="35.3909%" y="357" width="0.4115%" height="15" fill="rgb(233,223,10)" fg:x="86" fg:w="1"/><text x="35.6409%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.41%)</title><rect x="35.3909%" y="341" width="0.4115%" height="15" fill="rgb(215,21,27)" fg:x="86" fg:w="1"/><text x="35.6409%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;rusqlite::statement::Statement&gt; (2 samples, 0.82%)</title><rect x="35.8025%" y="357" width="0.8230%" height="15" fill="rgb(232,23,21)" fg:x="87" fg:w="2"/><text x="36.0525%" y="367.50"></text></g><g><title>sqlite3_finalize (2 samples, 0.82%)</title><rect x="35.8025%" y="341" width="0.8230%" height="15" fill="rgb(244,5,23)" fg:x="87" fg:w="2"/><text x="36.0525%" y="351.50"></text></g><g><title>sqlite3VdbeDelete (2 samples, 0.82%)</title><rect x="35.8025%" y="325" width="0.8230%" height="15" fill="rgb(226,81,46)" fg:x="87" fg:w="2"/><text x="36.0525%" y="335.50"></text></g><g><title>releaseMemArray.part.0 (1 samples, 0.41%)</title><rect x="36.2140%" y="309" width="0.4115%" height="15" fill="rgb(247,70,30)" fg:x="88" fg:w="1"/><text x="36.4640%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.41%)</title><rect x="37.8601%" y="293" width="0.4115%" height="15" fill="rgb(212,68,19)" fg:x="92" fg:w="1"/><text x="38.1101%" y="303.50"></text></g><g><title>sqlite3DbMallocRawNN (1 samples, 0.41%)</title><rect x="38.2716%" y="293" width="0.4115%" height="15" fill="rgb(240,187,13)" fg:x="93" fg:w="1"/><text x="38.5216%" y="303.50"></text></g><g><title>sqlite3ExprListAppendGrow (2 samples, 0.82%)</title><rect x="61.7284%" y="277" width="0.8230%" height="15" fill="rgb(223,113,26)" fg:x="150" fg:w="2"/><text x="61.9784%" y="287.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.41%)</title><rect x="64.6091%" y="245" width="0.4115%" height="15" fill="rgb(206,192,2)" fg:x="157" fg:w="1"/><text x="64.8591%" y="255.50"></text></g><g><title>sqlite3FinishCoding (7 samples, 2.88%)</title><rect x="62.5514%" y="277" width="2.8807%" height="15" fill="rgb(241,108,4)" fg:x="152" fg:w="7"/><text x="62.8014%" y="287.50">sq..</text></g><g><title>sqlite3VdbeMakeReady (5 samples, 2.06%)</title><rect x="63.3745%" y="261" width="2.0576%" height="15" fill="rgb(247,173,49)" fg:x="154" fg:w="5"/><text x="63.6245%" y="271.50">s..</text></g><g><title>resolveP2Values (1 samples, 0.41%)</title><rect x="65.0206%" y="245" width="0.4115%" height="15" fill="rgb(224,114,35)" fg:x="158" fg:w="1"/><text x="65.2706%" y="255.50"></text></g><g><title>sqlite3GetToken (14 samples, 5.76%)</title><rect x="65.4321%" y="277" width="5.7613%" height="15" fill="rgb(245,159,27)" fg:x="159" fg:w="14"/><text x="65.6821%" y="287.50">sqlite3..</text></g><g><title>keywordCode.part.0.constprop.0 (4 samples, 1.65%)</title><rect x="69.5473%" y="261" width="1.6461%" height="15" fill="rgb(245,172,44)" fg:x="169" fg:w="4"/><text x="69.7973%" y="271.50"></text></g><g><title>sqlite3IdListAppend (1 samples, 0.41%)</title><rect x="71.1934%" y="277" width="0.4115%" height="15" fill="rgb(236,23,11)" fg:x="173" fg:w="1"/><text x="71.4434%" y="287.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.41%)</title><rect x="71.1934%" y="261" width="0.4115%" height="15" fill="rgb(205,117,38)" fg:x="173" fg:w="1"/><text x="71.4434%" y="271.50"></text></g><g><title>exprListDeleteNN (3 samples, 1.23%)</title><rect x="76.9547%" y="261" width="1.2346%" height="15" fill="rgb(237,72,25)" fg:x="187" fg:w="3"/><text x="77.2047%" y="271.50"></text></g><g><title>sqlite3ExprDeleteNN (2 samples, 0.82%)</title><rect x="77.3663%" y="245" width="0.8230%" height="15" fill="rgb(244,70,9)" fg:x="188" fg:w="2"/><text x="77.6163%" y="255.50"></text></g><g><title>sqlite3CompleteInsertion (1 samples, 0.41%)</title><rect x="78.1893%" y="261" width="0.4115%" height="15" fill="rgb(217,125,39)" fg:x="190" fg:w="1"/><text x="78.4393%" y="271.50"></text></g><g><title>sqlite3ExprCode.part.0 (3 samples, 1.23%)</title><rect x="78.6008%" y="261" width="1.2346%" height="15" fill="rgb(235,36,10)" fg:x="191" fg:w="3"/><text x="78.8508%" y="271.50"></text></g><g><title>sqlite3ExprCodeTarget (3 samples, 1.23%)</title><rect x="78.6008%" y="245" width="1.2346%" height="15" fill="rgb(251,123,47)" fg:x="191" fg:w="3"/><text x="78.8508%" y="255.50"></text></g><g><title>sqlite3GenerateConstraintChecks (2 samples, 0.82%)</title><rect x="79.8354%" y="261" width="0.8230%" height="15" fill="rgb(221,13,13)" fg:x="194" fg:w="2"/><text x="80.0854%" y="271.50"></text></g><g><title>sqlite3GetVdbe.part.0 (4 samples, 1.65%)</title><rect x="80.6584%" y="261" width="1.6461%" height="15" fill="rgb(238,131,9)" fg:x="196" fg:w="4"/><text x="80.9084%" y="271.50"></text></g><g><title>sqlite3ResolveExprListNames (2 samples, 0.82%)</title><rect x="82.3045%" y="261" width="0.8230%" height="15" fill="rgb(211,50,8)" fg:x="200" fg:w="2"/><text x="82.5545%" y="271.50"></text></g><g><title>sqlite3SrcListDelete (1 samples, 0.41%)</title><rect x="83.1276%" y="261" width="0.4115%" height="15" fill="rgb(245,182,24)" fg:x="202" fg:w="1"/><text x="83.3776%" y="271.50"></text></g><g><title>sqlite3SrcListLookup (1 samples, 0.41%)</title><rect x="83.5391%" y="261" width="0.4115%" height="15" fill="rgb(242,14,37)" fg:x="203" fg:w="1"/><text x="83.7891%" y="271.50"></text></g><g><title>sqlite3LocateTable (1 samples, 0.41%)</title><rect x="83.5391%" y="245" width="0.4115%" height="15" fill="rgb(246,228,12)" fg:x="203" fg:w="1"/><text x="83.7891%" y="255.50"></text></g><g><title>sqlite3FindTable (1 samples, 0.41%)</title><rect x="83.5391%" y="229" width="0.4115%" height="15" fill="rgb(213,55,15)" fg:x="203" fg:w="1"/><text x="83.7891%" y="239.50"></text></g><g><title>findElementWithHash.constprop.0 (1 samples, 0.41%)</title><rect x="83.5391%" y="213" width="0.4115%" height="15" fill="rgb(209,9,3)" fg:x="203" fg:w="1"/><text x="83.7891%" y="223.50"></text></g><g><title>sqlite3Insert (31 samples, 12.76%)</title><rect x="71.6049%" y="277" width="12.7572%" height="15" fill="rgb(230,59,30)" fg:x="174" fg:w="31"/><text x="71.8549%" y="287.50">sqlite3Insert</text></g><g><title>sqlite3VdbeAddOp3 (1 samples, 0.41%)</title><rect x="83.9506%" y="261" width="0.4115%" height="15" fill="rgb(209,121,21)" fg:x="204" fg:w="1"/><text x="84.2006%" y="271.50"></text></g><g><title>sqlite3SelectNew (1 samples, 0.41%)</title><rect x="84.3621%" y="277" width="0.4115%" height="15" fill="rgb(220,109,13)" fg:x="205" fg:w="1"/><text x="84.6121%" y="287.50"></text></g><g><title>rusqlite::inner_connection::InnerConnection::prepare (119 samples, 48.97%)</title><rect x="36.6255%" y="357" width="48.9712%" height="15" fill="rgb(232,18,1)" fg:x="89" fg:w="119"/><text x="36.8755%" y="367.50">rusqlite::inner_connection::InnerConnection::prepare</text></g><g><title>sqlite3_prepare_v2 (119 samples, 48.97%)</title><rect x="36.6255%" y="341" width="48.9712%" height="15" fill="rgb(215,41,42)" fg:x="89" fg:w="119"/><text x="36.8755%" y="351.50">sqlite3_prepare_v2</text></g><g><title>sqlite3LockAndPrepare.part.0 (119 samples, 48.97%)</title><rect x="36.6255%" y="325" width="48.9712%" height="15" fill="rgb(224,123,36)" fg:x="89" fg:w="119"/><text x="36.8755%" y="335.50">sqlite3LockAndPrepare.part.0</text></g><g><title>sqlite3Prepare (119 samples, 48.97%)</title><rect x="36.6255%" y="309" width="48.9712%" height="15" fill="rgb(240,125,3)" fg:x="89" fg:w="119"/><text x="36.8755%" y="319.50">sqlite3Prepare</text></g><g><title>sqlite3RunParser (114 samples, 46.91%)</title><rect x="38.6831%" y="293" width="46.9136%" height="15" fill="rgb(205,98,50)" fg:x="94" fg:w="114"/><text x="38.9331%" y="303.50">sqlite3RunParser</text></g><g><title>tokenExpr (2 samples, 0.82%)</title><rect x="84.7737%" y="277" width="0.8230%" height="15" fill="rgb(205,185,37)" fg:x="206" fg:w="2"/><text x="85.0237%" y="287.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.41%)</title><rect x="88.8889%" y="309" width="0.4115%" height="15" fill="rgb(238,207,15)" fg:x="216" fg:w="1"/><text x="89.1389%" y="319.50"></text></g><g><title>allocateCursor (1 samples, 0.41%)</title><rect x="89.3004%" y="309" width="0.4115%" height="15" fill="rgb(213,199,42)" fg:x="217" fg:w="1"/><text x="89.5504%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="197" width="0.4115%" height="15" fill="rgb(235,201,11)" fg:x="220" fg:w="1"/><text x="90.7850%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="181" width="0.4115%" height="15" fill="rgb(207,46,11)" fg:x="220" fg:w="1"/><text x="90.7850%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="165" width="0.4115%" height="15" fill="rgb(241,35,35)" fg:x="220" fg:w="1"/><text x="90.7850%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="149" width="0.4115%" height="15" fill="rgb(243,32,47)" fg:x="220" fg:w="1"/><text x="90.7850%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="133" width="0.4115%" height="15" fill="rgb(247,202,23)" fg:x="220" fg:w="1"/><text x="90.7850%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="117" width="0.4115%" height="15" fill="rgb(219,102,11)" fg:x="220" fg:w="1"/><text x="90.7850%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="101" width="0.4115%" height="15" fill="rgb(243,110,44)" fg:x="220" fg:w="1"/><text x="90.7850%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="85" width="0.4115%" height="15" fill="rgb(222,74,54)" fg:x="220" fg:w="1"/><text x="90.7850%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="90.5350%" y="69" width="0.4115%" height="15" fill="rgb(216,99,12)" fg:x="220" fg:w="1"/><text x="90.7850%" y="79.50"></text></g><g><title>balance (2 samples, 0.82%)</title><rect x="90.5350%" y="293" width="0.8230%" height="15" fill="rgb(226,22,26)" fg:x="220" fg:w="2"/><text x="90.7850%" y="303.50"></text></g><g><title>allocateBtreePage (2 samples, 0.82%)</title><rect x="90.5350%" y="277" width="0.8230%" height="15" fill="rgb(217,163,10)" fg:x="220" fg:w="2"/><text x="90.7850%" y="287.50"></text></g><g><title>btreeGetUnusedPage (2 samples, 0.82%)</title><rect x="90.5350%" y="261" width="0.8230%" height="15" fill="rgb(213,25,53)" fg:x="220" fg:w="2"/><text x="90.7850%" y="271.50"></text></g><g><title>getPageNormal (2 samples, 0.82%)</title><rect x="90.5350%" y="245" width="0.8230%" height="15" fill="rgb(252,105,26)" fg:x="220" fg:w="2"/><text x="90.7850%" y="255.50"></text></g><g><title>pcache1Fetch (2 samples, 0.82%)</title><rect x="90.5350%" y="229" width="0.8230%" height="15" fill="rgb(220,39,43)" fg:x="220" fg:w="2"/><text x="90.7850%" y="239.50"></text></g><g><title>pcache1FetchStage2 (2 samples, 0.82%)</title><rect x="90.5350%" y="213" width="0.8230%" height="15" fill="rgb(229,68,48)" fg:x="220" fg:w="2"/><text x="90.7850%" y="223.50"></text></g><g><title>pcache1ResizeHash (1 samples, 0.41%)</title><rect x="90.9465%" y="197" width="0.4115%" height="15" fill="rgb(252,8,32)" fg:x="221" fg:w="1"/><text x="91.1965%" y="207.50"></text></g><g><title>insertCell (1 samples, 0.41%)</title><rect x="91.3580%" y="293" width="0.4115%" height="15" fill="rgb(223,20,43)" fg:x="222" fg:w="1"/><text x="91.6080%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.41%)</title><rect x="91.3580%" y="277" width="0.4115%" height="15" fill="rgb(229,81,49)" fg:x="222" fg:w="1"/><text x="91.6080%" y="287.50"></text></g><g><title>putVarint64 (1 samples, 0.41%)</title><rect x="91.7695%" y="293" width="0.4115%" height="15" fill="rgb(236,28,36)" fg:x="223" fg:w="1"/><text x="92.0195%" y="303.50"></text></g><g><title>sqlite3BtreeInsert (7 samples, 2.88%)</title><rect x="89.7119%" y="309" width="2.8807%" height="15" fill="rgb(249,185,26)" fg:x="218" fg:w="7"/><text x="89.9619%" y="319.50">sq..</text></g><g><title>sqlite3BtreeTableMoveto (1 samples, 0.41%)</title><rect x="92.1811%" y="293" width="0.4115%" height="15" fill="rgb(249,174,33)" fg:x="224" fg:w="1"/><text x="92.4311%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="261" width="0.4115%" height="15" fill="rgb(233,201,37)" fg:x="227" fg:w="1"/><text x="93.6656%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="245" width="0.4115%" height="15" fill="rgb(221,78,26)" fg:x="227" fg:w="1"/><text x="93.6656%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="229" width="0.4115%" height="15" fill="rgb(250,127,30)" fg:x="227" fg:w="1"/><text x="93.6656%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="213" width="0.4115%" height="15" fill="rgb(230,49,44)" fg:x="227" fg:w="1"/><text x="93.6656%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="197" width="0.4115%" height="15" fill="rgb(229,67,23)" fg:x="227" fg:w="1"/><text x="93.6656%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="181" width="0.4115%" height="15" fill="rgb(249,83,47)" fg:x="227" fg:w="1"/><text x="93.6656%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="165" width="0.4115%" height="15" fill="rgb(215,43,3)" fg:x="227" fg:w="1"/><text x="93.6656%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="149" width="0.4115%" height="15" fill="rgb(238,154,13)" fg:x="227" fg:w="1"/><text x="93.6656%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="133" width="0.4115%" height="15" fill="rgb(219,56,2)" fg:x="227" fg:w="1"/><text x="93.6656%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.41%)</title><rect x="93.4156%" y="117" width="0.4115%" height="15" fill="rgb(233,0,4)" fg:x="227" fg:w="1"/><text x="93.6656%" y="127.50"></text></g><g><title>getPageNormal (4 samples, 1.65%)</title><rect x="92.5926%" y="293" width="1.6461%" height="15" fill="rgb(235,30,7)" fg:x="225" fg:w="4"/><text x="92.8426%" y="303.50"></text></g><g><title>pcache1Fetch (3 samples, 1.23%)</title><rect x="93.0041%" y="277" width="1.2346%" height="15" fill="rgb(250,79,13)" fg:x="226" fg:w="3"/><text x="93.2541%" y="287.50"></text></g><g><title>___pthread_mutex_unlock (1 samples, 0.41%)</title><rect x="93.8272%" y="261" width="0.4115%" height="15" fill="rgb(211,146,34)" fg:x="228" fg:w="1"/><text x="94.0772%" y="271.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.41%)</title><rect x="93.8272%" y="245" width="0.4115%" height="15" fill="rgb(228,22,38)" fg:x="228" fg:w="1"/><text x="94.0772%" y="255.50"></text></g><g><title>sqlite3BtreeLast (8 samples, 3.29%)</title><rect x="92.5926%" y="309" width="3.2922%" height="15" fill="rgb(235,168,5)" fg:x="225" fg:w="8"/><text x="92.8426%" y="319.50">sql..</text></g><g><title>moveToRoot (4 samples, 1.65%)</title><rect x="94.2387%" y="293" width="1.6461%" height="15" fill="rgb(221,155,16)" fg:x="229" fg:w="4"/><text x="94.4887%" y="303.50"></text></g><g><title>getAndInitPage (4 samples, 1.65%)</title><rect x="94.2387%" y="277" width="1.6461%" height="15" fill="rgb(215,215,53)" fg:x="229" fg:w="4"/><text x="94.4887%" y="287.50"></text></g><g><title>getPageNormal (3 samples, 1.23%)</title><rect x="94.6502%" y="261" width="1.2346%" height="15" fill="rgb(223,4,10)" fg:x="230" fg:w="3"/><text x="94.9002%" y="271.50"></text></g><g><title>pcache1Fetch (3 samples, 1.23%)</title><rect x="94.6502%" y="245" width="1.2346%" height="15" fill="rgb(234,103,6)" fg:x="230" fg:w="3"/><text x="94.9002%" y="255.50"></text></g><g><title>__libc_start_main_impl (198 samples, 81.48%)</title><rect x="15.6379%" y="597" width="81.4815%" height="15" fill="rgb(227,97,0)" fg:x="38" fg:w="198"/><text x="15.8879%" y="607.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (198 samples, 81.48%)</title><rect x="15.6379%" y="581" width="81.4815%" height="15" fill="rgb(234,150,53)" fg:x="38" fg:w="198"/><text x="15.8879%" y="591.50">__libc_start_call_main</text></g><g><title>main (198 samples, 81.48%)</title><rect x="15.6379%" y="565" width="81.4815%" height="15" fill="rgb(228,201,54)" fg:x="38" fg:w="198"/><text x="15.8879%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (198 samples, 81.48%)</title><rect x="15.6379%" y="549" width="81.4815%" height="15" fill="rgb(222,22,37)" fg:x="38" fg:w="198"/><text x="15.8879%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (198 samples, 81.48%)</title><rect x="15.6379%" y="533" width="81.4815%" height="15" fill="rgb(237,53,32)" fg:x="38" fg:w="198"/><text x="15.8879%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (198 samples, 81.48%)</title><rect x="15.6379%" y="517" width="81.4815%" height="15" fill="rgb(233,25,53)" fg:x="38" fg:w="198"/><text x="15.8879%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (198 samples, 81.48%)</title><rect x="15.6379%" y="501" width="81.4815%" height="15" fill="rgb(210,40,34)" fg:x="38" fg:w="198"/><text x="15.8879%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (198 samples, 81.48%)</title><rect x="15.6379%" y="485" width="81.4815%" height="15" fill="rgb(241,220,44)" fg:x="38" fg:w="198"/><text x="15.8879%" y="495.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (198 samples, 81.48%)</title><rect x="15.6379%" y="469" width="81.4815%" height="15" fill="rgb(235,28,35)" fg:x="38" fg:w="198"/><text x="15.8879%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (198 samples, 81.48%)</title><rect x="15.6379%" y="453" width="81.4815%" height="15" fill="rgb(210,56,17)" fg:x="38" fg:w="198"/><text x="15.8879%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (198 samples, 81.48%)</title><rect x="15.6379%" y="437" width="81.4815%" height="15" fill="rgb(224,130,29)" fg:x="38" fg:w="198"/><text x="15.8879%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (198 samples, 81.48%)</title><rect x="15.6379%" y="421" width="81.4815%" height="15" fill="rgb(235,212,8)" fg:x="38" fg:w="198"/><text x="15.8879%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (198 samples, 81.48%)</title><rect x="15.6379%" y="405" width="81.4815%" height="15" fill="rgb(223,33,50)" fg:x="38" fg:w="198"/><text x="15.8879%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (198 samples, 81.48%)</title><rect x="15.6379%" y="389" width="81.4815%" height="15" fill="rgb(219,149,13)" fg:x="38" fg:w="198"/><text x="15.8879%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>csvtosql::main (198 samples, 81.48%)</title><rect x="15.6379%" y="373" width="81.4815%" height="15" fill="rgb(250,156,29)" fg:x="38" fg:w="198"/><text x="15.8879%" y="383.50">csvtosql::main</text></g><g><title>rusqlite::statement::Statement::execute_with_bound_parameters (28 samples, 11.52%)</title><rect x="85.5967%" y="357" width="11.5226%" height="15" fill="rgb(216,193,19)" fg:x="208" fg:w="28"/><text x="85.8467%" y="367.50">rusqlite::stateme..</text></g><g><title>sqlite3_step (28 samples, 11.52%)</title><rect x="85.5967%" y="341" width="11.5226%" height="15" fill="rgb(216,135,14)" fg:x="208" fg:w="28"/><text x="85.8467%" y="351.50">sqlite3_step</text></g><g><title>sqlite3VdbeExec (27 samples, 11.11%)</title><rect x="86.0082%" y="325" width="11.1111%" height="15" fill="rgb(241,47,5)" fg:x="209" fg:w="27"/><text x="86.2582%" y="335.50">sqlite3VdbeExec</text></g><g><title>sqlite3VdbeHalt (3 samples, 1.23%)</title><rect x="95.8848%" y="309" width="1.2346%" height="15" fill="rgb(233,42,35)" fg:x="233" fg:w="3"/><text x="96.1348%" y="319.50"></text></g><g><title>releaseMemArray.part.0 (2 samples, 0.82%)</title><rect x="96.2963%" y="293" width="0.8230%" height="15" fill="rgb(231,13,6)" fg:x="234" fg:w="2"/><text x="96.5463%" y="303.50"></text></g><g><title>_start (199 samples, 81.89%)</title><rect x="15.6379%" y="613" width="81.8930%" height="15" fill="rgb(207,181,40)" fg:x="38" fg:w="199"/><text x="15.8879%" y="623.50">_start</text></g><g><title>_dl_start (1 samples, 0.41%)</title><rect x="97.1193%" y="597" width="0.4115%" height="15" fill="rgb(254,173,49)" fg:x="236" fg:w="1"/><text x="97.3693%" y="607.50"></text></g><g><title>_dl_start_final (1 samples, 0.41%)</title><rect x="97.1193%" y="581" width="0.4115%" height="15" fill="rgb(221,1,38)" fg:x="236" fg:w="1"/><text x="97.3693%" y="591.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.41%)</title><rect x="97.1193%" y="565" width="0.4115%" height="15" fill="rgb(206,124,46)" fg:x="236" fg:w="1"/><text x="97.3693%" y="575.50"></text></g><g><title>dl_main (1 samples, 0.41%)</title><rect x="97.1193%" y="549" width="0.4115%" height="15" fill="rgb(249,21,11)" fg:x="236" fg:w="1"/><text x="97.3693%" y="559.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.41%)</title><rect x="97.1193%" y="533" width="0.4115%" height="15" fill="rgb(222,201,40)" fg:x="236" fg:w="1"/><text x="97.3693%" y="543.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.41%)</title><rect x="97.1193%" y="517" width="0.4115%" height="15" fill="rgb(235,61,29)" fg:x="236" fg:w="1"/><text x="97.3693%" y="527.50"></text></g><g><title>elf_machine_rela (1 samples, 0.41%)</title><rect x="97.1193%" y="501" width="0.4115%" height="15" fill="rgb(219,207,3)" fg:x="236" fg:w="1"/><text x="97.3693%" y="511.50"></text></g><g><title>csvtosql (238 samples, 97.94%)</title><rect x="0.0000%" y="629" width="97.9424%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="238"/><text x="0.2500%" y="639.50">csvtosql</text></g><g><title>csvtosql::main (1 samples, 0.41%)</title><rect x="97.5309%" y="613" width="0.4115%" height="15" fill="rgb(239,76,54)" fg:x="237" fg:w="1"/><text x="97.7809%" y="623.50"></text></g><g><title>all (243 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="243"/><text x="0.2500%" y="655.50"></text></g><g><title>perf-exec (5 samples, 2.06%)</title><rect x="97.9424%" y="629" width="2.0576%" height="15" fill="rgb(249,195,6)" fg:x="238" fg:w="5"/><text x="98.1924%" y="639.50">p..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="613" width="2.0576%" height="15" fill="rgb(237,174,47)" fg:x="238" fg:w="5"/><text x="98.1924%" y="623.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="597" width="2.0576%" height="15" fill="rgb(206,201,31)" fg:x="238" fg:w="5"/><text x="98.1924%" y="607.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="581" width="2.0576%" height="15" fill="rgb(231,57,52)" fg:x="238" fg:w="5"/><text x="98.1924%" y="591.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="565" width="2.0576%" height="15" fill="rgb(248,177,22)" fg:x="238" fg:w="5"/><text x="98.1924%" y="575.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="549" width="2.0576%" height="15" fill="rgb(215,211,37)" fg:x="238" fg:w="5"/><text x="98.1924%" y="559.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="533" width="2.0576%" height="15" fill="rgb(241,128,51)" fg:x="238" fg:w="5"/><text x="98.1924%" y="543.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="517" width="2.0576%" height="15" fill="rgb(227,165,31)" fg:x="238" fg:w="5"/><text x="98.1924%" y="527.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="501" width="2.0576%" height="15" fill="rgb(228,167,24)" fg:x="238" fg:w="5"/><text x="98.1924%" y="511.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="485" width="2.0576%" height="15" fill="rgb(228,143,12)" fg:x="238" fg:w="5"/><text x="98.1924%" y="495.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="469" width="2.0576%" height="15" fill="rgb(249,149,8)" fg:x="238" fg:w="5"/><text x="98.1924%" y="479.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="453" width="2.0576%" height="15" fill="rgb(243,35,44)" fg:x="238" fg:w="5"/><text x="98.1924%" y="463.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="437" width="2.0576%" height="15" fill="rgb(246,89,9)" fg:x="238" fg:w="5"/><text x="98.1924%" y="447.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="421" width="2.0576%" height="15" fill="rgb(233,213,13)" fg:x="238" fg:w="5"/><text x="98.1924%" y="431.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="405" width="2.0576%" height="15" fill="rgb(233,141,41)" fg:x="238" fg:w="5"/><text x="98.1924%" y="415.50">[..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.06%)</title><rect x="97.9424%" y="389" width="2.0576%" height="15" fill="rgb(239,167,4)" fg:x="238" fg:w="5"/><text x="98.1924%" y="399.50">[..</text></g></svg></svg>
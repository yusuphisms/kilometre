<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="805.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="1134"><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (18 samples, 1.59%)</title><rect x="0.0000%" y="741" width="1.5873%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="18"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.18%)</title><rect x="1.4109%" y="725" width="0.1764%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="2"/><text x="1.6609%" y="735.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.18%)</title><rect x="1.4109%" y="709" width="0.1764%" height="15" fill="rgb(221,193,54)" fg:x="16" fg:w="2"/><text x="1.6609%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.18%)</title><rect x="1.4109%" y="693" width="0.1764%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="2"/><text x="1.6609%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.18%)</title><rect x="1.4109%" y="677" width="0.1764%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="2"/><text x="1.6609%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.18%)</title><rect x="1.4109%" y="661" width="0.1764%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="2"/><text x="1.6609%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.18%)</title><rect x="1.4109%" y="645" width="0.1764%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="2"/><text x="1.6609%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.18%)</title><rect x="1.5873%" y="725" width="0.1764%" height="15" fill="rgb(228,23,34)" fg:x="18" fg:w="2"/><text x="1.8373%" y="735.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.44%)</title><rect x="1.7637%" y="725" width="0.4409%" height="15" fill="rgb(218,30,26)" fg:x="20" fg:w="5"/><text x="2.0137%" y="735.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.09%)</title><rect x="2.7337%" y="709" width="0.0882%" height="15" fill="rgb(220,122,19)" fg:x="31" fg:w="1"/><text x="2.9837%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.09%)</title><rect x="2.7337%" y="693" width="0.0882%" height="15" fill="rgb(250,228,42)" fg:x="31" fg:w="1"/><text x="2.9837%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.09%)</title><rect x="2.7337%" y="677" width="0.0882%" height="15" fill="rgb(240,193,28)" fg:x="31" fg:w="1"/><text x="2.9837%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.09%)</title><rect x="2.7337%" y="661" width="0.0882%" height="15" fill="rgb(216,20,37)" fg:x="31" fg:w="1"/><text x="2.9837%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.09%)</title><rect x="2.7337%" y="645" width="0.0882%" height="15" fill="rgb(206,188,39)" fg:x="31" fg:w="1"/><text x="2.9837%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.09%)</title><rect x="2.7337%" y="629" width="0.0882%" height="15" fill="rgb(217,207,13)" fg:x="31" fg:w="1"/><text x="2.9837%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.09%)</title><rect x="2.7337%" y="613" width="0.0882%" height="15" fill="rgb(231,73,38)" fg:x="31" fg:w="1"/><text x="2.9837%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.09%)</title><rect x="2.7337%" y="597" width="0.0882%" height="15" fill="rgb(225,20,46)" fg:x="31" fg:w="1"/><text x="2.9837%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (8 samples, 0.71%)</title><rect x="2.2046%" y="725" width="0.7055%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="8"/><text x="2.4546%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.09%)</title><rect x="2.8219%" y="709" width="0.0882%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="1"/><text x="3.0719%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="2.9101%" y="725" width="0.0882%" height="15" fill="rgb(226,26,5)" fg:x="33" fg:w="1"/><text x="3.1601%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.09%)</title><rect x="2.9101%" y="709" width="0.0882%" height="15" fill="rgb(249,33,26)" fg:x="33" fg:w="1"/><text x="3.1601%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.09%)</title><rect x="2.9101%" y="693" width="0.0882%" height="15" fill="rgb(235,183,28)" fg:x="33" fg:w="1"/><text x="3.1601%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.09%)</title><rect x="2.9101%" y="677" width="0.0882%" height="15" fill="rgb(221,5,38)" fg:x="33" fg:w="1"/><text x="3.1601%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="2.9982%" y="725" width="0.0882%" height="15" fill="rgb(247,18,42)" fg:x="34" fg:w="1"/><text x="3.2482%" y="735.50"></text></g><g><title>allocateCursor (3 samples, 0.26%)</title><rect x="3.0864%" y="725" width="0.2646%" height="15" fill="rgb(241,131,45)" fg:x="35" fg:w="3"/><text x="3.3364%" y="735.50"></text></g><g><title>btreeReleaseAllCursorPages.part.0 (1 samples, 0.09%)</title><rect x="3.3510%" y="725" width="0.0882%" height="15" fill="rgb(249,31,29)" fg:x="38" fg:w="1"/><text x="3.6010%" y="735.50"></text></g><g><title>core::fmt::write (2 samples, 0.18%)</title><rect x="3.4392%" y="725" width="0.1764%" height="15" fill="rgb(225,111,53)" fg:x="39" fg:w="2"/><text x="3.6892%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;rusqlite::statement::Statement&gt; (1 samples, 0.09%)</title><rect x="3.6155%" y="725" width="0.0882%" height="15" fill="rgb(238,160,17)" fg:x="41" fg:w="1"/><text x="3.8655%" y="735.50"></text></g><g><title>getPageNormal (4 samples, 0.35%)</title><rect x="3.7037%" y="725" width="0.3527%" height="15" fill="rgb(214,148,48)" fg:x="42" fg:w="4"/><text x="3.9537%" y="735.50"></text></g><g><title>rusqlite::cache::StatementCache::cache_stmt (1 samples, 0.09%)</title><rect x="4.0564%" y="725" width="0.0882%" height="15" fill="rgb(232,36,49)" fg:x="46" fg:w="1"/><text x="4.3064%" y="735.50"></text></g><g><title>rusqlite::cache::StatementCache::get (1 samples, 0.09%)</title><rect x="4.1446%" y="725" width="0.0882%" height="15" fill="rgb(209,103,24)" fg:x="47" fg:w="1"/><text x="4.3946%" y="735.50"></text></g><g><title>rusqlite::statement::Statement::bind_parameter (8 samples, 0.71%)</title><rect x="4.2328%" y="725" width="0.7055%" height="15" fill="rgb(229,88,8)" fg:x="48" fg:w="8"/><text x="4.4828%" y="735.50"></text></g><g><title>sqlite3BtreeBeginTrans (1 samples, 0.09%)</title><rect x="4.9383%" y="725" width="0.0882%" height="15" fill="rgb(213,181,19)" fg:x="56" fg:w="1"/><text x="5.1883%" y="735.50"></text></g><g><title>sqlite3BtreeInsert (2 samples, 0.18%)</title><rect x="5.0265%" y="725" width="0.1764%" height="15" fill="rgb(254,191,54)" fg:x="57" fg:w="2"/><text x="5.2765%" y="735.50"></text></g><g><title>sqlite3BtreeLast (2 samples, 0.18%)</title><rect x="5.2028%" y="725" width="0.1764%" height="15" fill="rgb(241,83,37)" fg:x="59" fg:w="2"/><text x="5.4528%" y="735.50"></text></g><g><title>sqlite3BtreeTableMoveto (2 samples, 0.18%)</title><rect x="5.3792%" y="725" width="0.1764%" height="15" fill="rgb(233,36,39)" fg:x="61" fg:w="2"/><text x="5.6292%" y="735.50"></text></g><g><title>sqlite3VdbeFreeCursorNN (1 samples, 0.09%)</title><rect x="5.5556%" y="725" width="0.0882%" height="15" fill="rgb(226,3,54)" fg:x="63" fg:w="1"/><text x="5.8056%" y="735.50"></text></g><g><title>sqlite3VdbeHalt (1 samples, 0.09%)</title><rect x="5.6437%" y="725" width="0.0882%" height="15" fill="rgb(245,192,40)" fg:x="64" fg:w="1"/><text x="5.8937%" y="735.50"></text></g><g><title>sqlite3VdbeMemGrow (3 samples, 0.26%)</title><rect x="5.7319%" y="725" width="0.2646%" height="15" fill="rgb(238,167,29)" fg:x="65" fg:w="3"/><text x="5.9819%" y="735.50"></text></g><g><title>sqlite3VdbeMemSetStr (5 samples, 0.44%)</title><rect x="5.9965%" y="725" width="0.4409%" height="15" fill="rgb(232,182,51)" fg:x="68" fg:w="5"/><text x="6.2465%" y="735.50"></text></g><g><title>sqlite3_bind_text (1 samples, 0.09%)</title><rect x="6.4374%" y="725" width="0.0882%" height="15" fill="rgb(231,60,39)" fg:x="73" fg:w="1"/><text x="6.6874%" y="735.50"></text></g><g><title>sqlite3_clear_bindings (2 samples, 0.18%)</title><rect x="6.5256%" y="725" width="0.1764%" height="15" fill="rgb(208,69,12)" fg:x="74" fg:w="2"/><text x="6.7756%" y="735.50"></text></g><g><title>sqlite3_finalize (5 samples, 0.44%)</title><rect x="6.7019%" y="725" width="0.4409%" height="15" fill="rgb(235,93,37)" fg:x="76" fg:w="5"/><text x="6.9519%" y="735.50"></text></g><g><title>sqlite3_mutex_leave (1 samples, 0.09%)</title><rect x="7.1429%" y="725" width="0.0882%" height="15" fill="rgb(213,116,39)" fg:x="81" fg:w="1"/><text x="7.3929%" y="735.50"></text></g><g><title>[[heap]] (65 samples, 5.73%)</title><rect x="1.5873%" y="741" width="5.7319%" height="15" fill="rgb(222,207,29)" fg:x="18" fg:w="65"/><text x="1.8373%" y="751.50">[[heap]]</text></g><g><title>sqlite3_step (1 samples, 0.09%)</title><rect x="7.2310%" y="725" width="0.0882%" height="15" fill="rgb(206,96,30)" fg:x="82" fg:w="1"/><text x="7.4810%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.18%)</title><rect x="7.3192%" y="741" width="0.1764%" height="15" fill="rgb(218,138,4)" fg:x="83" fg:w="2"/><text x="7.5692%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="725" width="0.0882%" height="15" fill="rgb(250,191,14)" fg:x="84" fg:w="1"/><text x="7.6574%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="709" width="0.0882%" height="15" fill="rgb(239,60,40)" fg:x="84" fg:w="1"/><text x="7.6574%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="693" width="0.0882%" height="15" fill="rgb(206,27,48)" fg:x="84" fg:w="1"/><text x="7.6574%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="677" width="0.0882%" height="15" fill="rgb(225,35,8)" fg:x="84" fg:w="1"/><text x="7.6574%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="661" width="0.0882%" height="15" fill="rgb(250,213,24)" fg:x="84" fg:w="1"/><text x="7.6574%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="645" width="0.0882%" height="15" fill="rgb(247,123,22)" fg:x="84" fg:w="1"/><text x="7.6574%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="629" width="0.0882%" height="15" fill="rgb(231,138,38)" fg:x="84" fg:w="1"/><text x="7.6574%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="613" width="0.0882%" height="15" fill="rgb(231,145,46)" fg:x="84" fg:w="1"/><text x="7.6574%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="597" width="0.0882%" height="15" fill="rgb(251,118,11)" fg:x="84" fg:w="1"/><text x="7.6574%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="581" width="0.0882%" height="15" fill="rgb(217,147,25)" fg:x="84" fg:w="1"/><text x="7.6574%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="565" width="0.0882%" height="15" fill="rgb(247,81,37)" fg:x="84" fg:w="1"/><text x="7.6574%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="549" width="0.0882%" height="15" fill="rgb(209,12,38)" fg:x="84" fg:w="1"/><text x="7.6574%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="533" width="0.0882%" height="15" fill="rgb(227,1,9)" fg:x="84" fg:w="1"/><text x="7.6574%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="517" width="0.0882%" height="15" fill="rgb(248,47,43)" fg:x="84" fg:w="1"/><text x="7.6574%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="501" width="0.0882%" height="15" fill="rgb(221,10,30)" fg:x="84" fg:w="1"/><text x="7.6574%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="485" width="0.0882%" height="15" fill="rgb(210,229,1)" fg:x="84" fg:w="1"/><text x="7.6574%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="7.4074%" y="469" width="0.0882%" height="15" fill="rgb(222,148,37)" fg:x="84" fg:w="1"/><text x="7.6574%" y="479.50"></text></g><g><title>&lt;&amp;[&amp;T: 5] as rusqlite::params::Params&gt;::__bind_in (1 samples, 0.09%)</title><rect x="7.4956%" y="725" width="0.0882%" height="15" fill="rgb(234,67,33)" fg:x="85" fg:w="1"/><text x="7.7456%" y="735.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.88%)</title><rect x="7.5838%" y="725" width="0.8818%" height="15" fill="rgb(247,98,35)" fg:x="86" fg:w="10"/><text x="7.8338%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="8.4656%" y="725" width="0.0882%" height="15" fill="rgb(247,138,52)" fg:x="96" fg:w="1"/><text x="8.7156%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::hash::Hash&gt;::hash (1 samples, 0.09%)</title><rect x="8.5538%" y="725" width="0.0882%" height="15" fill="rgb(213,79,30)" fg:x="97" fg:w="1"/><text x="8.8038%" y="735.50"></text></g><g><title>__GI___libc_free (1 samples, 0.09%)</title><rect x="8.6420%" y="725" width="0.0882%" height="15" fill="rgb(246,177,23)" fg:x="98" fg:w="1"/><text x="8.8920%" y="735.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.71%)</title><rect x="8.7302%" y="725" width="0.7055%" height="15" fill="rgb(230,62,27)" fg:x="99" fg:w="8"/><text x="8.9802%" y="735.50"></text></g><g><title>core::fmt::Formatter::pad (5 samples, 0.44%)</title><rect x="9.4356%" y="725" width="0.4409%" height="15" fill="rgb(216,154,8)" fg:x="107" fg:w="5"/><text x="9.6856%" y="735.50"></text></g><g><title>core::fmt::write (6 samples, 0.53%)</title><rect x="9.8765%" y="725" width="0.5291%" height="15" fill="rgb(244,35,45)" fg:x="112" fg:w="6"/><text x="10.1265%" y="735.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 0.26%)</title><rect x="10.4056%" y="725" width="0.2646%" height="15" fill="rgb(251,115,12)" fg:x="118" fg:w="3"/><text x="10.6556%" y="735.50"></text></g><g><title>insertCell (1 samples, 0.09%)</title><rect x="10.6702%" y="725" width="0.0882%" height="15" fill="rgb(240,54,50)" fg:x="121" fg:w="1"/><text x="10.9202%" y="735.50"></text></g><g><title>libsqlite3_sys::SQLITE_TRANSIENT (1 samples, 0.09%)</title><rect x="10.7584%" y="725" width="0.0882%" height="15" fill="rgb(233,84,52)" fg:x="122" fg:w="1"/><text x="11.0084%" y="735.50"></text></g><g><title>pcache1Fetch (3 samples, 0.26%)</title><rect x="10.8466%" y="725" width="0.2646%" height="15" fill="rgb(207,117,47)" fg:x="123" fg:w="3"/><text x="11.0966%" y="735.50"></text></g><g><title>rusqlite::statement::Statement::bind_parameter (2 samples, 0.18%)</title><rect x="11.1111%" y="725" width="0.1764%" height="15" fill="rgb(249,43,39)" fg:x="126" fg:w="2"/><text x="11.3611%" y="735.50"></text></g><g><title>sqlite3BtreeTableMoveto (1 samples, 0.09%)</title><rect x="11.2875%" y="725" width="0.0882%" height="15" fill="rgb(209,38,44)" fg:x="128" fg:w="1"/><text x="11.5375%" y="735.50"></text></g><g><title>sqlite3VdbeExec (1 samples, 0.09%)</title><rect x="11.3757%" y="725" width="0.0882%" height="15" fill="rgb(236,212,23)" fg:x="129" fg:w="1"/><text x="11.6257%" y="735.50"></text></g><g><title>sqlite3VdbeMemSetStr (2 samples, 0.18%)</title><rect x="11.4638%" y="725" width="0.1764%" height="15" fill="rgb(242,79,21)" fg:x="130" fg:w="2"/><text x="11.7138%" y="735.50"></text></g><g><title>sqlite3_finalize (2 samples, 0.18%)</title><rect x="11.6402%" y="725" width="0.1764%" height="15" fill="rgb(211,96,35)" fg:x="132" fg:w="2"/><text x="11.8902%" y="735.50"></text></g><g><title>sqlite3_mutex_leave (1 samples, 0.09%)</title><rect x="11.8166%" y="725" width="0.0882%" height="15" fill="rgb(253,215,40)" fg:x="134" fg:w="1"/><text x="12.0666%" y="735.50"></text></g><g><title>[[stack]] (51 samples, 4.50%)</title><rect x="7.4956%" y="741" width="4.4974%" height="15" fill="rgb(211,81,21)" fg:x="85" fg:w="51"/><text x="7.7456%" y="751.50">[[sta..</text></g><g><title>sqlite3_step (1 samples, 0.09%)</title><rect x="11.9048%" y="725" width="0.0882%" height="15" fill="rgb(208,190,38)" fg:x="135" fg:w="1"/><text x="12.1548%" y="735.50"></text></g><g><title>[csvtosql] (1 samples, 0.09%)</title><rect x="11.9929%" y="725" width="0.0882%" height="15" fill="rgb(235,213,38)" fg:x="136" fg:w="1"/><text x="12.2429%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="11.9929%" y="709" width="0.0882%" height="15" fill="rgb(237,122,38)" fg:x="136" fg:w="1"/><text x="12.2429%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.18%)</title><rect x="12.0811%" y="725" width="0.1764%" height="15" fill="rgb(244,218,35)" fg:x="137" fg:w="2"/><text x="12.3311%" y="735.50"></text></g><g><title>__rdl_alloc (2 samples, 0.18%)</title><rect x="12.2575%" y="725" width="0.1764%" height="15" fill="rgb(240,68,47)" fg:x="139" fg:w="2"/><text x="12.5075%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="12.4339%" y="725" width="0.0882%" height="15" fill="rgb(210,16,53)" fg:x="141" fg:w="1"/><text x="12.6839%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;rusqlite::cache::CachedStatement&gt; (1 samples, 0.09%)</title><rect x="12.5220%" y="725" width="0.0882%" height="15" fill="rgb(235,124,12)" fg:x="142" fg:w="1"/><text x="12.7720%" y="735.50"></text></g><g><title>[csvtosql] (10 samples, 0.88%)</title><rect x="11.9929%" y="741" width="0.8818%" height="15" fill="rgb(224,169,11)" fg:x="136" fg:w="10"/><text x="12.2429%" y="751.50"></text></g><g><title>sqlite3VdbeMemGrow (3 samples, 0.26%)</title><rect x="12.6102%" y="725" width="0.2646%" height="15" fill="rgb(250,166,2)" fg:x="143" fg:w="3"/><text x="12.8602%" y="735.50"></text></g><g><title>&lt;&amp;[&amp;T: 5] as rusqlite::params::Params&gt;::__bind_in (1 samples, 0.09%)</title><rect x="12.8748%" y="725" width="0.0882%" height="15" fill="rgb(242,216,29)" fg:x="146" fg:w="1"/><text x="13.1248%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="12.9630%" y="725" width="0.0882%" height="15" fill="rgb(230,116,27)" fg:x="147" fg:w="1"/><text x="13.2130%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::hash::Hash&gt;::hash (1 samples, 0.09%)</title><rect x="13.0511%" y="725" width="0.0882%" height="15" fill="rgb(228,99,48)" fg:x="148" fg:w="1"/><text x="13.3011%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.26%)</title><rect x="13.1393%" y="725" width="0.2646%" height="15" fill="rgb(253,11,6)" fg:x="149" fg:w="3"/><text x="13.3893%" y="735.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.44%)</title><rect x="13.4039%" y="725" width="0.4409%" height="15" fill="rgb(247,143,39)" fg:x="152" fg:w="5"/><text x="13.6539%" y="735.50"></text></g><g><title>&lt;rusqlite::raw_statement::RawStatement as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="13.8448%" y="725" width="0.0882%" height="15" fill="rgb(236,97,10)" fg:x="157" fg:w="1"/><text x="14.0948%" y="735.50"></text></g><g><title>[csvtosql] (1 samples, 0.09%)</title><rect x="13.9330%" y="725" width="0.0882%" height="15" fill="rgb(233,208,19)" fg:x="158" fg:w="1"/><text x="14.1830%" y="735.50"></text></g><g><title>[csvtosql] (1 samples, 0.09%)</title><rect x="13.9330%" y="709" width="0.0882%" height="15" fill="rgb(216,164,2)" fg:x="158" fg:w="1"/><text x="14.1830%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="13.9330%" y="693" width="0.0882%" height="15" fill="rgb(220,129,5)" fg:x="158" fg:w="1"/><text x="14.1830%" y="703.50"></text></g><g><title>__GI___libc_free (7 samples, 0.62%)</title><rect x="14.0212%" y="725" width="0.6173%" height="15" fill="rgb(242,17,10)" fg:x="159" fg:w="7"/><text x="14.2712%" y="735.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="14.6384%" y="725" width="0.1764%" height="15" fill="rgb(242,107,0)" fg:x="166" fg:w="2"/><text x="14.8884%" y="735.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.18%)</title><rect x="14.8148%" y="725" width="0.1764%" height="15" fill="rgb(251,28,31)" fg:x="168" fg:w="2"/><text x="15.0648%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="14.9912%" y="725" width="0.0882%" height="15" fill="rgb(233,223,10)" fg:x="170" fg:w="1"/><text x="15.2412%" y="735.50"></text></g><g><title>__rdl_alloc (1 samples, 0.09%)</title><rect x="15.0794%" y="725" width="0.0882%" height="15" fill="rgb(215,21,27)" fg:x="171" fg:w="1"/><text x="15.3294%" y="735.50"></text></g><g><title>__rdl_realloc (3 samples, 0.26%)</title><rect x="15.1675%" y="725" width="0.2646%" height="15" fill="rgb(232,23,21)" fg:x="172" fg:w="3"/><text x="15.4175%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.26%)</title><rect x="15.1675%" y="709" width="0.2646%" height="15" fill="rgb(244,5,23)" fg:x="172" fg:w="3"/><text x="15.4175%" y="719.50"></text></g><g><title>_int_free (8 samples, 0.71%)</title><rect x="15.4321%" y="725" width="0.7055%" height="15" fill="rgb(226,81,46)" fg:x="175" fg:w="8"/><text x="15.6821%" y="735.50"></text></g><g><title>_int_realloc (4 samples, 0.35%)</title><rect x="16.1376%" y="725" width="0.3527%" height="15" fill="rgb(247,70,30)" fg:x="183" fg:w="4"/><text x="16.3876%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="16.4903%" y="725" width="0.0882%" height="15" fill="rgb(212,68,19)" fg:x="187" fg:w="1"/><text x="16.7403%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.09%)</title><rect x="16.4903%" y="709" width="0.0882%" height="15" fill="rgb(240,187,13)" fg:x="187" fg:w="1"/><text x="16.7403%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.09%)</title><rect x="16.4903%" y="693" width="0.0882%" height="15" fill="rgb(223,113,26)" fg:x="187" fg:w="1"/><text x="16.7403%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.09%)</title><rect x="16.4903%" y="677" width="0.0882%" height="15" fill="rgb(206,192,2)" fg:x="187" fg:w="1"/><text x="16.7403%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="16.5785%" y="725" width="0.0882%" height="15" fill="rgb(241,108,4)" fg:x="188" fg:w="1"/><text x="16.8285%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;rusqlite::cache::CachedStatement&gt; (1 samples, 0.09%)</title><rect x="16.6667%" y="725" width="0.0882%" height="15" fill="rgb(247,173,49)" fg:x="189" fg:w="1"/><text x="16.9167%" y="735.50"></text></g><g><title>getPageNormal (1 samples, 0.09%)</title><rect x="16.7549%" y="725" width="0.0882%" height="15" fill="rgb(224,114,35)" fg:x="190" fg:w="1"/><text x="17.0049%" y="735.50"></text></g><g><title>moveToRoot (1 samples, 0.09%)</title><rect x="16.8430%" y="725" width="0.0882%" height="15" fill="rgb(245,159,27)" fg:x="191" fg:w="1"/><text x="17.0930%" y="735.50"></text></g><g><title>releaseMemArray.part.0 (1 samples, 0.09%)</title><rect x="16.9312%" y="725" width="0.0882%" height="15" fill="rgb(245,172,44)" fg:x="192" fg:w="1"/><text x="17.1812%" y="735.50"></text></g><g><title>rusqlite::cache::StatementCache::cache_stmt (1 samples, 0.09%)</title><rect x="17.0194%" y="725" width="0.0882%" height="15" fill="rgb(236,23,11)" fg:x="193" fg:w="1"/><text x="17.2694%" y="735.50"></text></g><g><title>rusqlite::statement::Statement::execute_with_bound_parameters (3 samples, 0.26%)</title><rect x="17.1076%" y="725" width="0.2646%" height="15" fill="rgb(205,117,38)" fg:x="194" fg:w="3"/><text x="17.3576%" y="735.50"></text></g><g><title>rusqlite::str_for_sqlite (4 samples, 0.35%)</title><rect x="17.3721%" y="725" width="0.3527%" height="15" fill="rgb(237,72,25)" fg:x="197" fg:w="4"/><text x="17.6221%" y="735.50"></text></g><g><title>sqlite3BtreeInsert (1 samples, 0.09%)</title><rect x="17.7249%" y="725" width="0.0882%" height="15" fill="rgb(244,70,9)" fg:x="201" fg:w="1"/><text x="17.9749%" y="735.50"></text></g><g><title>sqlite3BtreeLast (2 samples, 0.18%)</title><rect x="17.8131%" y="725" width="0.1764%" height="15" fill="rgb(217,125,39)" fg:x="202" fg:w="2"/><text x="18.0631%" y="735.50"></text></g><g><title>sqlite3VdbeMemSetStr (3 samples, 0.26%)</title><rect x="17.9894%" y="725" width="0.2646%" height="15" fill="rgb(235,36,10)" fg:x="204" fg:w="3"/><text x="18.2394%" y="735.50"></text></g><g><title>sqlite3_bind_text (9 samples, 0.79%)</title><rect x="18.2540%" y="725" width="0.7937%" height="15" fill="rgb(251,123,47)" fg:x="207" fg:w="9"/><text x="18.5040%" y="735.50"></text></g><g><title>sqlite3_clear_bindings (2 samples, 0.18%)</title><rect x="19.0476%" y="725" width="0.1764%" height="15" fill="rgb(221,13,13)" fg:x="216" fg:w="2"/><text x="19.2976%" y="735.50"></text></g><g><title>[unknown] (73 samples, 6.44%)</title><rect x="12.8748%" y="741" width="6.4374%" height="15" fill="rgb(238,131,9)" fg:x="146" fg:w="73"/><text x="13.1248%" y="751.50">[unknown]</text></g><g><title>vdbeMemClear (1 samples, 0.09%)</title><rect x="19.2240%" y="725" width="0.0882%" height="15" fill="rgb(211,50,8)" fg:x="218" fg:w="1"/><text x="19.4740%" y="735.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.18%)</title><rect x="19.3122%" y="741" width="0.1764%" height="15" fill="rgb(245,182,24)" fg:x="219" fg:w="2"/><text x="19.5622%" y="751.50"></text></g><g><title>__rdl_realloc (5 samples, 0.44%)</title><rect x="19.4885%" y="741" width="0.4409%" height="15" fill="rgb(242,14,37)" fg:x="221" fg:w="5"/><text x="19.7385%" y="751.50"></text></g><g><title>rusqlite::str_for_sqlite (9 samples, 0.79%)</title><rect x="23.1922%" y="453" width="0.7937%" height="15" fill="rgb(246,228,12)" fg:x="263" fg:w="9"/><text x="23.4422%" y="463.50"></text></g><g><title>libsqlite3_sys::SQLITE_TRANSIENT (1 samples, 0.09%)</title><rect x="23.8977%" y="437" width="0.0882%" height="15" fill="rgb(213,55,15)" fg:x="271" fg:w="1"/><text x="24.1477%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.79%)</title><rect x="26.9841%" y="421" width="0.7937%" height="15" fill="rgb(209,9,3)" fg:x="306" fg:w="9"/><text x="27.2341%" y="431.50"></text></g><g><title>sqlite3VdbeMemSetStr (33 samples, 2.91%)</title><rect x="25.9259%" y="437" width="2.9101%" height="15" fill="rgb(230,59,30)" fg:x="294" fg:w="33"/><text x="26.1759%" y="447.50">sq..</text></g><g><title>sqlite3VdbeMemGrow (12 samples, 1.06%)</title><rect x="27.7778%" y="421" width="1.0582%" height="15" fill="rgb(209,121,21)" fg:x="315" fg:w="12"/><text x="28.0278%" y="431.50"></text></g><g><title>sqlite3DbMallocRawNN (2 samples, 0.18%)</title><rect x="28.6596%" y="405" width="0.1764%" height="15" fill="rgb(220,109,13)" fg:x="325" fg:w="2"/><text x="28.9096%" y="415.50"></text></g><g><title>&lt;&amp;[&amp;T: 5] as rusqlite::params::Params&gt;::__bind_in (85 samples, 7.50%)</title><rect x="21.5168%" y="485" width="7.4956%" height="15" fill="rgb(232,18,1)" fg:x="244" fg:w="85"/><text x="21.7668%" y="495.50">&lt;&amp;[&amp;T: 5] ..</text></g><g><title>rusqlite::statement::Statement::bind_parameter (81 samples, 7.14%)</title><rect x="21.8695%" y="469" width="7.1429%" height="15" fill="rgb(215,41,42)" fg:x="248" fg:w="81"/><text x="22.1195%" y="479.50">rusqlite::..</text></g><g><title>sqlite3_bind_text (57 samples, 5.03%)</title><rect x="23.9859%" y="453" width="5.0265%" height="15" fill="rgb(224,123,36)" fg:x="272" fg:w="57"/><text x="24.2359%" y="463.50">sqlite..</text></g><g><title>sqlite3_mutex_enter (2 samples, 0.18%)</title><rect x="28.8360%" y="437" width="0.1764%" height="15" fill="rgb(240,125,3)" fg:x="327" fg:w="2"/><text x="29.0860%" y="447.50"></text></g><g><title>checked_request2size (4 samples, 0.35%)</title><rect x="32.7160%" y="293" width="0.3527%" height="15" fill="rgb(205,98,50)" fg:x="371" fg:w="4"/><text x="32.9660%" y="303.50"></text></g><g><title>__GI___libc_malloc (16 samples, 1.41%)</title><rect x="32.2751%" y="309" width="1.4109%" height="15" fill="rgb(205,185,37)" fg:x="366" fg:w="16"/><text x="32.5251%" y="319.50"></text></g><g><title>tcache_get (7 samples, 0.62%)</title><rect x="33.0688%" y="293" width="0.6173%" height="15" fill="rgb(238,207,15)" fg:x="375" fg:w="7"/><text x="33.3188%" y="303.50"></text></g><g><title>__rdl_alloc (2 samples, 0.18%)</title><rect x="33.6861%" y="309" width="0.1764%" height="15" fill="rgb(213,199,42)" fg:x="382" fg:w="2"/><text x="33.9361%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.18%)</title><rect x="33.6861%" y="293" width="0.1764%" height="15" fill="rgb(235,201,11)" fg:x="382" fg:w="2"/><text x="33.9361%" y="303.50"></text></g><g><title>alloc::string::String::with_capacity (23 samples, 2.03%)</title><rect x="32.0106%" y="437" width="2.0282%" height="15" fill="rgb(207,46,11)" fg:x="363" fg:w="23"/><text x="32.2606%" y="447.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 1.76%)</title><rect x="32.2751%" y="421" width="1.7637%" height="15" fill="rgb(241,35,35)" fg:x="366" fg:w="20"/><text x="32.5251%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 1.76%)</title><rect x="32.2751%" y="405" width="1.7637%" height="15" fill="rgb(243,32,47)" fg:x="366" fg:w="20"/><text x="32.5251%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 1.76%)</title><rect x="32.2751%" y="389" width="1.7637%" height="15" fill="rgb(247,202,23)" fg:x="366" fg:w="20"/><text x="32.5251%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 1.76%)</title><rect x="32.2751%" y="373" width="1.7637%" height="15" fill="rgb(219,102,11)" fg:x="366" fg:w="20"/><text x="32.5251%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 1.76%)</title><rect x="32.2751%" y="357" width="1.7637%" height="15" fill="rgb(243,110,44)" fg:x="366" fg:w="20"/><text x="32.5251%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 1.76%)</title><rect x="32.2751%" y="341" width="1.7637%" height="15" fill="rgb(222,74,54)" fg:x="366" fg:w="20"/><text x="32.5251%" y="351.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 1.76%)</title><rect x="32.2751%" y="325" width="1.7637%" height="15" fill="rgb(216,99,12)" fg:x="366" fg:w="20"/><text x="32.5251%" y="335.50"></text></g><g><title>__rust_alloc (2 samples, 0.18%)</title><rect x="33.8624%" y="309" width="0.1764%" height="15" fill="rgb(226,22,26)" fg:x="384" fg:w="2"/><text x="34.1124%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.26%)</title><rect x="34.1270%" y="357" width="0.2646%" height="15" fill="rgb(217,163,10)" fg:x="387" fg:w="3"/><text x="34.3770%" y="367.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (5 samples, 0.44%)</title><rect x="34.0388%" y="437" width="0.4409%" height="15" fill="rgb(213,25,53)" fg:x="386" fg:w="5"/><text x="34.2888%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (5 samples, 0.44%)</title><rect x="34.0388%" y="421" width="0.4409%" height="15" fill="rgb(252,105,26)" fg:x="386" fg:w="5"/><text x="34.2888%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (5 samples, 0.44%)</title><rect x="34.0388%" y="405" width="0.4409%" height="15" fill="rgb(220,39,43)" fg:x="386" fg:w="5"/><text x="34.2888%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.44%)</title><rect x="34.0388%" y="389" width="0.4409%" height="15" fill="rgb(229,68,48)" fg:x="386" fg:w="5"/><text x="34.2888%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.44%)</title><rect x="34.0388%" y="373" width="0.4409%" height="15" fill="rgb(252,8,32)" fg:x="386" fg:w="5"/><text x="34.2888%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.09%)</title><rect x="34.3915%" y="357" width="0.0882%" height="15" fill="rgb(223,20,43)" fg:x="390" fg:w="1"/><text x="34.6415%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.09%)</title><rect x="34.3915%" y="341" width="0.0882%" height="15" fill="rgb(229,81,49)" fg:x="390" fg:w="1"/><text x="34.6415%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.18%)</title><rect x="35.3616%" y="405" width="0.1764%" height="15" fill="rgb(236,28,36)" fg:x="401" fg:w="2"/><text x="35.6116%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4 samples, 0.35%)</title><rect x="36.4198%" y="277" width="0.3527%" height="15" fill="rgb(249,185,26)" fg:x="413" fg:w="4"/><text x="36.6698%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.09%)</title><rect x="36.6843%" y="261" width="0.0882%" height="15" fill="rgb(249,174,33)" fg:x="416" fg:w="1"/><text x="36.9343%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.18%)</title><rect x="37.0370%" y="245" width="0.1764%" height="15" fill="rgb(233,201,37)" fg:x="420" fg:w="2"/><text x="37.2870%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="37.2134%" y="245" width="0.0882%" height="15" fill="rgb(221,78,26)" fg:x="422" fg:w="1"/><text x="37.4634%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="37.2134%" y="229" width="0.0882%" height="15" fill="rgb(250,127,30)" fg:x="422" fg:w="1"/><text x="37.4634%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="37.2134%" y="213" width="0.0882%" height="15" fill="rgb(230,49,44)" fg:x="422" fg:w="1"/><text x="37.4634%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="37.2134%" y="197" width="0.0882%" height="15" fill="rgb(229,67,23)" fg:x="422" fg:w="1"/><text x="37.4634%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="37.2134%" y="181" width="0.0882%" height="15" fill="rgb(249,83,47)" fg:x="422" fg:w="1"/><text x="37.4634%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="37.2134%" y="165" width="0.0882%" height="15" fill="rgb(215,43,3)" fg:x="422" fg:w="1"/><text x="37.4634%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="37.2134%" y="149" width="0.0882%" height="15" fill="rgb(238,154,13)" fg:x="422" fg:w="1"/><text x="37.4634%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.26%)</title><rect x="37.3016%" y="245" width="0.2646%" height="15" fill="rgb(219,56,2)" fg:x="423" fg:w="3"/><text x="37.5516%" y="255.50"></text></g><g><title>_int_realloc (9 samples, 0.79%)</title><rect x="40.2998%" y="165" width="0.7937%" height="15" fill="rgb(233,0,4)" fg:x="457" fg:w="9"/><text x="40.5498%" y="175.50"></text></g><g><title>__GI___libc_realloc (34 samples, 3.00%)</title><rect x="38.3598%" y="181" width="2.9982%" height="15" fill="rgb(235,30,7)" fg:x="435" fg:w="34"/><text x="38.6098%" y="191.50">__G..</text></g><g><title>checked_request2size (3 samples, 0.26%)</title><rect x="41.0935%" y="165" width="0.2646%" height="15" fill="rgb(250,79,13)" fg:x="466" fg:w="3"/><text x="41.3435%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (36 samples, 3.17%)</title><rect x="38.3598%" y="229" width="3.1746%" height="15" fill="rgb(211,146,34)" fg:x="435" fg:w="36"/><text x="38.6098%" y="239.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (36 samples, 3.17%)</title><rect x="38.3598%" y="213" width="3.1746%" height="15" fill="rgb(228,22,38)" fg:x="435" fg:w="36"/><text x="38.6098%" y="223.50">all..</text></g><g><title>alloc::alloc::realloc (36 samples, 3.17%)</title><rect x="38.3598%" y="197" width="3.1746%" height="15" fill="rgb(235,168,5)" fg:x="435" fg:w="36"/><text x="38.6098%" y="207.50">all..</text></g><g><title>__rust_realloc (2 samples, 0.18%)</title><rect x="41.3580%" y="181" width="0.1764%" height="15" fill="rgb(221,155,16)" fg:x="469" fg:w="2"/><text x="41.6080%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (49 samples, 4.32%)</title><rect x="37.5661%" y="245" width="4.3210%" height="15" fill="rgb(215,215,53)" fg:x="426" fg:w="49"/><text x="37.8161%" y="255.50">alloc..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.35%)</title><rect x="41.5344%" y="229" width="0.3527%" height="15" fill="rgb(223,4,10)" fg:x="471" fg:w="4"/><text x="41.7844%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (67 samples, 5.91%)</title><rect x="36.1552%" y="309" width="5.9083%" height="15" fill="rgb(234,103,6)" fg:x="410" fg:w="67"/><text x="36.4052%" y="319.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (67 samples, 5.91%)</title><rect x="36.1552%" y="293" width="5.9083%" height="15" fill="rgb(227,97,0)" fg:x="410" fg:w="67"/><text x="36.4052%" y="303.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (60 samples, 5.29%)</title><rect x="36.7725%" y="277" width="5.2910%" height="15" fill="rgb(234,150,53)" fg:x="417" fg:w="60"/><text x="37.0225%" y="287.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (60 samples, 5.29%)</title><rect x="36.7725%" y="261" width="5.2910%" height="15" fill="rgb(228,201,54)" fg:x="417" fg:w="60"/><text x="37.0225%" y="271.50">alloc:..</text></g><g><title>core::cmp::max (2 samples, 0.18%)</title><rect x="41.8871%" y="245" width="0.1764%" height="15" fill="rgb(222,22,37)" fg:x="475" fg:w="2"/><text x="42.1371%" y="255.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.18%)</title><rect x="41.8871%" y="229" width="0.1764%" height="15" fill="rgb(237,53,32)" fg:x="475" fg:w="2"/><text x="42.1371%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 2.73%)</title><rect x="42.0635%" y="309" width="2.7337%" height="15" fill="rgb(233,25,53)" fg:x="477" fg:w="31"/><text x="42.3135%" y="319.50">co..</text></g><g><title>__memcpy_avx_unaligned_erms (29 samples, 2.56%)</title><rect x="42.2399%" y="293" width="2.5573%" height="15" fill="rgb(210,40,34)" fg:x="479" fg:w="29"/><text x="42.4899%" y="303.50">__..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (109 samples, 9.61%)</title><rect x="35.5379%" y="405" width="9.6120%" height="15" fill="rgb(241,220,44)" fg:x="403" fg:w="109"/><text x="35.7879%" y="415.50">&lt;&amp;mut W as cor..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (107 samples, 9.44%)</title><rect x="35.7143%" y="389" width="9.4356%" height="15" fill="rgb(235,28,35)" fg:x="405" fg:w="107"/><text x="35.9643%" y="399.50">&lt;alloc::strin..</text></g><g><title>alloc::string::String::push_str (107 samples, 9.44%)</title><rect x="35.7143%" y="373" width="9.4356%" height="15" fill="rgb(210,56,17)" fg:x="405" fg:w="107"/><text x="35.9643%" y="383.50">alloc::string..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (107 samples, 9.44%)</title><rect x="35.7143%" y="357" width="9.4356%" height="15" fill="rgb(224,130,29)" fg:x="405" fg:w="107"/><text x="35.9643%" y="367.50">alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (107 samples, 9.44%)</title><rect x="35.7143%" y="341" width="9.4356%" height="15" fill="rgb(235,212,8)" fg:x="405" fg:w="107"/><text x="35.9643%" y="351.50">&lt;alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (107 samples, 9.44%)</title><rect x="35.7143%" y="325" width="9.4356%" height="15" fill="rgb(223,33,50)" fg:x="405" fg:w="107"/><text x="35.9643%" y="335.50">alloc::vec::V..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.35%)</title><rect x="44.7972%" y="309" width="0.3527%" height="15" fill="rgb(219,149,13)" fg:x="508" fg:w="4"/><text x="45.0472%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.35%)</title><rect x="44.7972%" y="293" width="0.3527%" height="15" fill="rgb(250,156,29)" fg:x="508" fg:w="4"/><text x="45.0472%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="45.1499%" y="405" width="0.1764%" height="15" fill="rgb(216,193,19)" fg:x="512" fg:w="2"/><text x="45.3999%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="45.1499%" y="389" width="0.1764%" height="15" fill="rgb(216,135,14)" fg:x="512" fg:w="2"/><text x="45.3999%" y="399.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (5 samples, 0.44%)</title><rect x="45.3263%" y="405" width="0.4409%" height="15" fill="rgb(241,47,5)" fg:x="514" fg:w="5"/><text x="45.5763%" y="415.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.09%)</title><rect x="45.7672%" y="405" width="0.0882%" height="15" fill="rgb(233,42,35)" fg:x="519" fg:w="1"/><text x="46.0172%" y="415.50"></text></g><g><title>core::fmt::Formatter::pad (6 samples, 0.53%)</title><rect x="45.8554%" y="405" width="0.5291%" height="15" fill="rgb(231,13,6)" fg:x="520" fg:w="6"/><text x="46.1054%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (185 samples, 16.31%)</title><rect x="30.3351%" y="469" width="16.3139%" height="15" fill="rgb(207,181,40)" fg:x="344" fg:w="185"/><text x="30.5851%" y="479.50">&lt;core::iter::adapters::ma..</text></g><g><title>alloc::fmt::format::format_inner (168 samples, 14.81%)</title><rect x="31.8342%" y="453" width="14.8148%" height="15" fill="rgb(254,173,49)" fg:x="361" fg:w="168"/><text x="32.0842%" y="463.50">alloc::fmt::format::for..</text></g><g><title>core::fmt::Write::write_fmt (138 samples, 12.17%)</title><rect x="34.4797%" y="437" width="12.1693%" height="15" fill="rgb(221,1,38)" fg:x="391" fg:w="138"/><text x="34.7297%" y="447.50">core::fmt::Write::..</text></g><g><title>core::fmt::write (138 samples, 12.17%)</title><rect x="34.4797%" y="421" width="12.1693%" height="15" fill="rgb(206,124,46)" fg:x="391" fg:w="138"/><text x="34.7297%" y="431.50">core::fmt::write</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.26%)</title><rect x="46.3845%" y="405" width="0.2646%" height="15" fill="rgb(249,21,11)" fg:x="526" fg:w="3"/><text x="46.6345%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.26%)</title><rect x="46.3845%" y="389" width="0.2646%" height="15" fill="rgb(222,201,40)" fg:x="526" fg:w="3"/><text x="46.6345%" y="399.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="46.6490%" y="469" width="0.1764%" height="15" fill="rgb(235,61,29)" fg:x="529" fg:w="2"/><text x="46.8990%" y="479.50"></text></g><g><title>tcache_get (1 samples, 0.09%)</title><rect x="46.7372%" y="453" width="0.0882%" height="15" fill="rgb(219,207,3)" fg:x="530" fg:w="1"/><text x="46.9872%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (203 samples, 17.90%)</title><rect x="29.0123%" y="485" width="17.9012%" height="15" fill="rgb(222,56,46)" fg:x="329" fg:w="203"/><text x="29.2623%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc..</text></g><g><title>__rdl_alloc (1 samples, 0.09%)</title><rect x="46.8254%" y="469" width="0.0882%" height="15" fill="rgb(239,76,54)" fg:x="531" fg:w="1"/><text x="47.0754%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.09%)</title><rect x="46.8254%" y="453" width="0.0882%" height="15" fill="rgb(231,124,27)" fg:x="531" fg:w="1"/><text x="47.0754%" y="463.50"></text></g><g><title>checked_request2size (1 samples, 0.09%)</title><rect x="49.0300%" y="453" width="0.0882%" height="15" fill="rgb(249,195,6)" fg:x="556" fg:w="1"/><text x="49.2800%" y="463.50"></text></g><g><title>__GI___libc_malloc (15 samples, 1.32%)</title><rect x="48.0600%" y="469" width="1.3228%" height="15" fill="rgb(237,174,47)" fg:x="545" fg:w="15"/><text x="48.3100%" y="479.50"></text></g><g><title>tcache_get (3 samples, 0.26%)</title><rect x="49.1182%" y="453" width="0.2646%" height="15" fill="rgb(206,201,31)" fg:x="557" fg:w="3"/><text x="49.3682%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.35%)</title><rect x="49.3827%" y="469" width="0.3527%" height="15" fill="rgb(231,57,52)" fg:x="560" fg:w="4"/><text x="49.6327%" y="479.50"></text></g><g><title>__rust_alloc (1 samples, 0.09%)</title><rect x="49.7354%" y="469" width="0.0882%" height="15" fill="rgb(248,177,22)" fg:x="564" fg:w="1"/><text x="49.9854%" y="479.50"></text></g><g><title>csv::Trim::should_trim_fields (2 samples, 0.18%)</title><rect x="49.8236%" y="469" width="0.1764%" height="15" fill="rgb(215,211,37)" fg:x="565" fg:w="2"/><text x="50.0736%" y="479.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (3 samples, 0.26%)</title><rect x="50.0000%" y="469" width="0.2646%" height="15" fill="rgb(241,128,51)" fg:x="567" fg:w="3"/><text x="50.2500%" y="479.50"></text></g><g><title>csv_core::reader::Reader::read_record (40 samples, 3.53%)</title><rect x="50.2646%" y="469" width="3.5273%" height="15" fill="rgb(227,165,31)" fg:x="570" fg:w="40"/><text x="50.5146%" y="479.50">csv..</text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::Read&gt;::read (4 samples, 0.35%)</title><rect x="53.7919%" y="437" width="0.3527%" height="15" fill="rgb(228,167,24)" fg:x="610" fg:w="4"/><text x="54.0419%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.35%)</title><rect x="53.7919%" y="421" width="0.3527%" height="15" fill="rgb(228,143,12)" fg:x="610" fg:w="4"/><text x="54.0419%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (4 samples, 0.35%)</title><rect x="53.7919%" y="405" width="0.3527%" height="15" fill="rgb(249,149,8)" fg:x="610" fg:w="4"/><text x="54.0419%" y="415.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (4 samples, 0.35%)</title><rect x="53.7919%" y="389" width="0.3527%" height="15" fill="rgb(243,35,44)" fg:x="610" fg:w="4"/><text x="54.0419%" y="399.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 0.35%)</title><rect x="53.7919%" y="373" width="0.3527%" height="15" fill="rgb(246,89,9)" fg:x="610" fg:w="4"/><text x="54.0419%" y="383.50"></text></g><g><title>__GI___libc_read (4 samples, 0.35%)</title><rect x="53.7919%" y="357" width="0.3527%" height="15" fill="rgb(233,213,13)" fg:x="610" fg:w="4"/><text x="54.0419%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.35%)</title><rect x="53.7919%" y="341" width="0.3527%" height="15" fill="rgb(233,141,41)" fg:x="610" fg:w="4"/><text x="54.0419%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.35%)</title><rect x="53.7919%" y="325" width="0.3527%" height="15" fill="rgb(239,167,4)" fg:x="610" fg:w="4"/><text x="54.0419%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.35%)</title><rect x="53.7919%" y="309" width="0.3527%" height="15" fill="rgb(209,217,16)" fg:x="610" fg:w="4"/><text x="54.0419%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.35%)</title><rect x="53.7919%" y="293" width="0.3527%" height="15" fill="rgb(219,88,35)" fg:x="610" fg:w="4"/><text x="54.0419%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 0.26%)</title><rect x="53.8801%" y="277" width="0.2646%" height="15" fill="rgb(220,193,23)" fg:x="611" fg:w="3"/><text x="54.1301%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 0.26%)</title><rect x="53.8801%" y="261" width="0.2646%" height="15" fill="rgb(230,90,52)" fg:x="611" fg:w="3"/><text x="54.1301%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.18%)</title><rect x="53.9683%" y="245" width="0.1764%" height="15" fill="rgb(252,106,19)" fg:x="612" fg:w="2"/><text x="54.2183%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.18%)</title><rect x="53.9683%" y="229" width="0.1764%" height="15" fill="rgb(206,74,20)" fg:x="612" fg:w="2"/><text x="54.2183%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="54.0564%" y="213" width="0.0882%" height="15" fill="rgb(230,138,44)" fg:x="613" fg:w="1"/><text x="54.3064%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="54.0564%" y="197" width="0.0882%" height="15" fill="rgb(235,182,43)" fg:x="613" fg:w="1"/><text x="54.3064%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="54.0564%" y="181" width="0.0882%" height="15" fill="rgb(242,16,51)" fg:x="613" fg:w="1"/><text x="54.3064%" y="191.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 7.32%)</title><rect x="46.9136%" y="485" width="7.3192%" height="15" fill="rgb(248,9,4)" fg:x="532" fg:w="83"/><text x="47.1636%" y="495.50">&lt;csv::read..</text></g><g><title>std::io::default_read_buf (5 samples, 0.44%)</title><rect x="53.7919%" y="469" width="0.4409%" height="15" fill="rgb(210,31,22)" fg:x="610" fg:w="5"/><text x="54.0419%" y="479.50"></text></g><g><title>&lt;std::io::stdio::Stdin as std::io::Read&gt;::read (5 samples, 0.44%)</title><rect x="53.7919%" y="453" width="0.4409%" height="15" fill="rgb(239,54,39)" fg:x="610" fg:w="5"/><text x="54.0419%" y="463.50"></text></g><g><title>std::io::stdio::Stdin::lock (1 samples, 0.09%)</title><rect x="54.1446%" y="437" width="0.0882%" height="15" fill="rgb(230,99,41)" fg:x="614" fg:w="1"/><text x="54.3946%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.09%)</title><rect x="54.1446%" y="421" width="0.0882%" height="15" fill="rgb(253,106,12)" fg:x="614" fg:w="1"/><text x="54.3946%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.09%)</title><rect x="54.1446%" y="405" width="0.0882%" height="15" fill="rgb(213,46,41)" fg:x="614" fg:w="1"/><text x="54.3946%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.09%)</title><rect x="54.1446%" y="389" width="0.0882%" height="15" fill="rgb(215,133,35)" fg:x="614" fg:w="1"/><text x="54.3946%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.09%)</title><rect x="54.1446%" y="373" width="0.0882%" height="15" fill="rgb(213,28,5)" fg:x="614" fg:w="1"/><text x="54.3946%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.09%)</title><rect x="54.1446%" y="357" width="0.0882%" height="15" fill="rgb(215,77,49)" fg:x="614" fg:w="1"/><text x="54.3946%" y="367.50"></text></g><g><title>__GI___libc_free (56 samples, 4.94%)</title><rect x="54.2328%" y="485" width="4.9383%" height="15" fill="rgb(248,100,22)" fg:x="615" fg:w="56"/><text x="54.4828%" y="495.50">__GI__..</text></g><g><title>_int_free (33 samples, 2.91%)</title><rect x="56.2610%" y="469" width="2.9101%" height="15" fill="rgb(208,67,9)" fg:x="638" fg:w="33"/><text x="56.5110%" y="479.50">_i..</text></g><g><title>tcache_put (10 samples, 0.88%)</title><rect x="58.2892%" y="453" width="0.8818%" height="15" fill="rgb(219,133,21)" fg:x="661" fg:w="10"/><text x="58.5392%" y="463.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="59.1711%" y="485" width="0.1764%" height="15" fill="rgb(246,46,29)" fg:x="671" fg:w="2"/><text x="59.4211%" y="495.50"></text></g><g><title>tcache_get (1 samples, 0.09%)</title><rect x="59.2593%" y="469" width="0.0882%" height="15" fill="rgb(246,185,52)" fg:x="672" fg:w="1"/><text x="59.5093%" y="479.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.44%)</title><rect x="59.3474%" y="485" width="0.4409%" height="15" fill="rgb(252,136,11)" fg:x="673" fg:w="5"/><text x="59.5974%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.44%)</title><rect x="59.3474%" y="469" width="0.4409%" height="15" fill="rgb(219,138,53)" fg:x="673" fg:w="5"/><text x="59.5974%" y="479.50"></text></g><g><title>__rust_alloc (1 samples, 0.09%)</title><rect x="59.7884%" y="485" width="0.0882%" height="15" fill="rgb(211,51,23)" fg:x="678" fg:w="1"/><text x="60.0384%" y="495.50"></text></g><g><title>__rust_dealloc (11 samples, 0.97%)</title><rect x="59.8765%" y="485" width="0.9700%" height="15" fill="rgb(247,221,28)" fg:x="679" fg:w="11"/><text x="60.1265%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.18%)</title><rect x="61.8166%" y="453" width="0.1764%" height="15" fill="rgb(251,222,45)" fg:x="701" fg:w="2"/><text x="62.0666%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;rusqlite::statement::Statement&gt; (9 samples, 0.79%)</title><rect x="61.5520%" y="469" width="0.7937%" height="15" fill="rgb(217,162,53)" fg:x="698" fg:w="9"/><text x="61.8020%" y="479.50"></text></g><g><title>&lt;rusqlite::raw_statement::RawStatement as core::ops::drop::Drop&gt;::drop (4 samples, 0.35%)</title><rect x="61.9929%" y="453" width="0.3527%" height="15" fill="rgb(229,93,14)" fg:x="703" fg:w="4"/><text x="62.2429%" y="463.50"></text></g><g><title>sqlite3_finalize (2 samples, 0.18%)</title><rect x="62.1693%" y="437" width="0.1764%" height="15" fill="rgb(209,67,49)" fg:x="705" fg:w="2"/><text x="62.4193%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::hash::Hash&gt;::hash (13 samples, 1.15%)</title><rect x="64.0212%" y="453" width="1.1464%" height="15" fill="rgb(213,87,29)" fg:x="726" fg:w="13"/><text x="64.2712%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;rusqlite::cache::CachedStatement&gt; (69 samples, 6.08%)</title><rect x="60.8466%" y="485" width="6.0847%" height="15" fill="rgb(205,151,52)" fg:x="690" fg:w="69"/><text x="61.0966%" y="495.50">core::pt..</text></g><g><title>rusqlite::cache::StatementCache::cache_stmt (52 samples, 4.59%)</title><rect x="62.3457%" y="469" width="4.5855%" height="15" fill="rgb(253,215,39)" fg:x="707" fg:w="52"/><text x="62.5957%" y="479.50">rusql..</text></g><g><title>sqlite3_clear_bindings (20 samples, 1.76%)</title><rect x="65.1675%" y="453" width="1.7637%" height="15" fill="rgb(221,220,41)" fg:x="739" fg:w="20"/><text x="65.4175%" y="463.50"></text></g><g><title>vdbeMemClear (8 samples, 0.71%)</title><rect x="66.2257%" y="437" width="0.7055%" height="15" fill="rgb(218,133,21)" fg:x="751" fg:w="8"/><text x="66.4757%" y="447.50"></text></g><g><title>__GI___libc_free (5 samples, 0.44%)</title><rect x="71.1640%" y="469" width="0.4409%" height="15" fill="rgb(221,193,43)" fg:x="807" fg:w="5"/><text x="71.4140%" y="479.50"></text></g><g><title>_int_free (3 samples, 0.26%)</title><rect x="71.3404%" y="453" width="0.2646%" height="15" fill="rgb(240,128,52)" fg:x="809" fg:w="3"/><text x="71.5904%" y="463.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.35%)</title><rect x="71.6049%" y="469" width="0.3527%" height="15" fill="rgb(253,114,12)" fg:x="812" fg:w="4"/><text x="71.8549%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.18%)</title><rect x="71.9577%" y="469" width="0.1764%" height="15" fill="rgb(215,223,47)" fg:x="816" fg:w="2"/><text x="72.2077%" y="479.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.35%)</title><rect x="72.2222%" y="453" width="0.3527%" height="15" fill="rgb(248,225,23)" fg:x="819" fg:w="4"/><text x="72.4722%" y="463.50"></text></g><g><title>tcache_get (3 samples, 0.26%)</title><rect x="72.3104%" y="437" width="0.2646%" height="15" fill="rgb(250,108,0)" fg:x="820" fg:w="3"/><text x="72.5604%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (6 samples, 0.53%)</title><rect x="72.1340%" y="469" width="0.5291%" height="15" fill="rgb(228,208,7)" fg:x="818" fg:w="6"/><text x="72.3840%" y="479.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="72.5750%" y="453" width="0.0882%" height="15" fill="rgb(244,45,10)" fg:x="823" fg:w="1"/><text x="72.8250%" y="463.50"></text></g><g><title>rusqlite::cache::StatementCache::get (76 samples, 6.70%)</title><rect x="66.9312%" y="485" width="6.7019%" height="15" fill="rgb(207,125,25)" fg:x="759" fg:w="76"/><text x="67.1812%" y="495.50">rusqlite:..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (11 samples, 0.97%)</title><rect x="72.6631%" y="469" width="0.9700%" height="15" fill="rgb(210,195,18)" fg:x="824" fg:w="11"/><text x="72.9131%" y="479.50"></text></g><g><title>sqlite3_reset (3 samples, 0.26%)</title><rect x="73.7213%" y="469" width="0.2646%" height="15" fill="rgb(249,80,12)" fg:x="836" fg:w="3"/><text x="73.9713%" y="479.50"></text></g><g><title>[csvtosql] (1 samples, 0.09%)</title><rect x="82.0106%" y="437" width="0.0882%" height="15" fill="rgb(221,65,9)" fg:x="930" fg:w="1"/><text x="82.2606%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.88%)</title><rect x="82.0988%" y="437" width="0.8818%" height="15" fill="rgb(235,49,36)" fg:x="931" fg:w="10"/><text x="82.3488%" y="447.50"></text></g><g><title>allocateCursor (6 samples, 0.53%)</title><rect x="82.9806%" y="437" width="0.5291%" height="15" fill="rgb(225,32,20)" fg:x="941" fg:w="6"/><text x="83.2306%" y="447.50"></text></g><g><title>sqlite3DbMallocRawNN (1 samples, 0.09%)</title><rect x="83.4215%" y="421" width="0.0882%" height="15" fill="rgb(215,141,46)" fg:x="946" fg:w="1"/><text x="83.6715%" y="431.50"></text></g><g><title>btreeParseCellPtr (3 samples, 0.26%)</title><rect x="83.5097%" y="437" width="0.2646%" height="15" fill="rgb(250,160,47)" fg:x="947" fg:w="3"/><text x="83.7597%" y="447.50"></text></g><g><title>sqlite3BtreeBeginTrans (1 samples, 0.09%)</title><rect x="83.7743%" y="437" width="0.0882%" height="15" fill="rgb(216,222,40)" fg:x="950" fg:w="1"/><text x="84.0243%" y="447.50"></text></g><g><title>sqlite3BtreeCursor (4 samples, 0.35%)</title><rect x="83.8624%" y="437" width="0.3527%" height="15" fill="rgb(234,217,39)" fg:x="951" fg:w="4"/><text x="84.1124%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.26%)</title><rect x="85.6261%" y="421" width="0.2646%" height="15" fill="rgb(207,178,40)" fg:x="971" fg:w="3"/><text x="85.8761%" y="431.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.18%)</title><rect x="85.8907%" y="421" width="0.1764%" height="15" fill="rgb(221,136,13)" fg:x="974" fg:w="2"/><text x="86.1407%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.62%)</title><rect x="86.4198%" y="245" width="0.6173%" height="15" fill="rgb(249,199,10)" fg:x="980" fg:w="7"/><text x="86.6698%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="86.5961%" y="229" width="0.4409%" height="15" fill="rgb(249,222,13)" fg:x="982" fg:w="5"/><text x="86.8461%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="86.5961%" y="213" width="0.4409%" height="15" fill="rgb(244,185,38)" fg:x="982" fg:w="5"/><text x="86.8461%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="86.5961%" y="197" width="0.4409%" height="15" fill="rgb(236,202,9)" fg:x="982" fg:w="5"/><text x="86.8461%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="86.5961%" y="181" width="0.4409%" height="15" fill="rgb(250,229,37)" fg:x="982" fg:w="5"/><text x="86.8461%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="86.5961%" y="165" width="0.4409%" height="15" fill="rgb(206,174,23)" fg:x="982" fg:w="5"/><text x="86.8461%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="86.5961%" y="149" width="0.4409%" height="15" fill="rgb(211,33,43)" fg:x="982" fg:w="5"/><text x="86.8461%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="86.5961%" y="133" width="0.4409%" height="15" fill="rgb(245,58,50)" fg:x="982" fg:w="5"/><text x="86.8461%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 0.26%)</title><rect x="86.7725%" y="117" width="0.2646%" height="15" fill="rgb(244,68,36)" fg:x="984" fg:w="3"/><text x="87.0225%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.18%)</title><rect x="86.8607%" y="101" width="0.1764%" height="15" fill="rgb(232,229,15)" fg:x="985" fg:w="2"/><text x="87.1107%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="86.9489%" y="85" width="0.0882%" height="15" fill="rgb(254,30,23)" fg:x="986" fg:w="1"/><text x="87.1989%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="86.9489%" y="69" width="0.0882%" height="15" fill="rgb(235,160,14)" fg:x="986" fg:w="1"/><text x="87.1989%" y="79.50"></text></g><g><title>pcache1Alloc (13 samples, 1.15%)</title><rect x="86.2434%" y="325" width="1.1464%" height="15" fill="rgb(212,155,44)" fg:x="978" fg:w="13"/><text x="86.4934%" y="335.50"></text></g><g><title>sqlite3Malloc.part.0 (13 samples, 1.15%)</title><rect x="86.2434%" y="309" width="1.1464%" height="15" fill="rgb(226,2,50)" fg:x="978" fg:w="13"/><text x="86.4934%" y="319.50"></text></g><g><title>sqlite3MemMalloc (13 samples, 1.15%)</title><rect x="86.2434%" y="293" width="1.1464%" height="15" fill="rgb(234,177,6)" fg:x="978" fg:w="13"/><text x="86.4934%" y="303.50"></text></g><g><title>__GI___libc_malloc (13 samples, 1.15%)</title><rect x="86.2434%" y="277" width="1.1464%" height="15" fill="rgb(217,24,9)" fg:x="978" fg:w="13"/><text x="86.4934%" y="287.50"></text></g><g><title>_int_malloc (12 samples, 1.06%)</title><rect x="86.3316%" y="261" width="1.0582%" height="15" fill="rgb(220,13,46)" fg:x="979" fg:w="12"/><text x="86.5816%" y="271.50"></text></g><g><title>sysmalloc (4 samples, 0.35%)</title><rect x="87.0370%" y="245" width="0.3527%" height="15" fill="rgb(239,221,27)" fg:x="987" fg:w="4"/><text x="87.2870%" y="255.50"></text></g><g><title>__glibc_morecore (4 samples, 0.35%)</title><rect x="87.0370%" y="229" width="0.3527%" height="15" fill="rgb(222,198,25)" fg:x="987" fg:w="4"/><text x="87.2870%" y="239.50"></text></g><g><title>__GI___sbrk (4 samples, 0.35%)</title><rect x="87.0370%" y="213" width="0.3527%" height="15" fill="rgb(211,99,13)" fg:x="987" fg:w="4"/><text x="87.2870%" y="223.50"></text></g><g><title>__GI___sbrk (4 samples, 0.35%)</title><rect x="87.0370%" y="197" width="0.3527%" height="15" fill="rgb(232,111,31)" fg:x="987" fg:w="4"/><text x="87.2870%" y="207.50"></text></g><g><title>__brk (4 samples, 0.35%)</title><rect x="87.0370%" y="181" width="0.3527%" height="15" fill="rgb(245,82,37)" fg:x="987" fg:w="4"/><text x="87.2870%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.35%)</title><rect x="87.0370%" y="165" width="0.3527%" height="15" fill="rgb(227,149,46)" fg:x="987" fg:w="4"/><text x="87.2870%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.35%)</title><rect x="87.0370%" y="149" width="0.3527%" height="15" fill="rgb(218,36,50)" fg:x="987" fg:w="4"/><text x="87.2870%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.35%)</title><rect x="87.0370%" y="133" width="0.3527%" height="15" fill="rgb(226,80,48)" fg:x="987" fg:w="4"/><text x="87.2870%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.18%)</title><rect x="87.2134%" y="117" width="0.1764%" height="15" fill="rgb(238,224,15)" fg:x="989" fg:w="2"/><text x="87.4634%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.3016%" y="101" width="0.0882%" height="15" fill="rgb(241,136,10)" fg:x="990" fg:w="1"/><text x="87.5516%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.3016%" y="85" width="0.0882%" height="15" fill="rgb(208,32,45)" fg:x="990" fg:w="1"/><text x="87.5516%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.3016%" y="69" width="0.0882%" height="15" fill="rgb(207,135,9)" fg:x="990" fg:w="1"/><text x="87.5516%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.3016%" y="53" width="0.0882%" height="15" fill="rgb(206,86,44)" fg:x="990" fg:w="1"/><text x="87.5516%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.3016%" y="37" width="0.0882%" height="15" fill="rgb(245,177,15)" fg:x="990" fg:w="1"/><text x="87.5516%" y="47.50"></text></g><g><title>allocateBtreePage (16 samples, 1.41%)</title><rect x="86.1552%" y="405" width="1.4109%" height="15" fill="rgb(206,64,50)" fg:x="977" fg:w="16"/><text x="86.4052%" y="415.50"></text></g><g><title>btreeGetUnusedPage (16 samples, 1.41%)</title><rect x="86.1552%" y="389" width="1.4109%" height="15" fill="rgb(234,36,40)" fg:x="977" fg:w="16"/><text x="86.4052%" y="399.50"></text></g><g><title>getPageNormal (16 samples, 1.41%)</title><rect x="86.1552%" y="373" width="1.4109%" height="15" fill="rgb(213,64,8)" fg:x="977" fg:w="16"/><text x="86.4052%" y="383.50"></text></g><g><title>pcache1Fetch (16 samples, 1.41%)</title><rect x="86.1552%" y="357" width="1.4109%" height="15" fill="rgb(210,75,36)" fg:x="977" fg:w="16"/><text x="86.4052%" y="367.50"></text></g><g><title>pcache1FetchStage2 (16 samples, 1.41%)</title><rect x="86.1552%" y="341" width="1.4109%" height="15" fill="rgb(229,88,21)" fg:x="977" fg:w="16"/><text x="86.4052%" y="351.50"></text></g><g><title>pcache1ResizeHash (2 samples, 0.18%)</title><rect x="87.3898%" y="325" width="0.1764%" height="15" fill="rgb(252,204,47)" fg:x="991" fg:w="2"/><text x="87.6398%" y="335.50"></text></g><g><title>sqlite3Malloc.part.0 (1 samples, 0.09%)</title><rect x="87.4780%" y="309" width="0.0882%" height="15" fill="rgb(208,77,27)" fg:x="992" fg:w="1"/><text x="87.7280%" y="319.50"></text></g><g><title>sqlite3MemMalloc (1 samples, 0.09%)</title><rect x="87.4780%" y="293" width="0.0882%" height="15" fill="rgb(221,76,26)" fg:x="992" fg:w="1"/><text x="87.7280%" y="303.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="87.4780%" y="277" width="0.0882%" height="15" fill="rgb(225,139,18)" fg:x="992" fg:w="1"/><text x="87.7280%" y="287.50"></text></g><g><title>_int_malloc (1 samples, 0.09%)</title><rect x="87.4780%" y="261" width="0.0882%" height="15" fill="rgb(230,137,11)" fg:x="992" fg:w="1"/><text x="87.7280%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.4780%" y="245" width="0.0882%" height="15" fill="rgb(212,28,1)" fg:x="992" fg:w="1"/><text x="87.7280%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.4780%" y="229" width="0.0882%" height="15" fill="rgb(248,164,17)" fg:x="992" fg:w="1"/><text x="87.7280%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.4780%" y="213" width="0.0882%" height="15" fill="rgb(222,171,42)" fg:x="992" fg:w="1"/><text x="87.7280%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.4780%" y="197" width="0.0882%" height="15" fill="rgb(243,84,45)" fg:x="992" fg:w="1"/><text x="87.7280%" y="207.50"></text></g><g><title>balance (19 samples, 1.68%)</title><rect x="86.0670%" y="421" width="1.6755%" height="15" fill="rgb(252,49,23)" fg:x="976" fg:w="19"/><text x="86.3170%" y="431.50"></text></g><g><title>balance_nonroot (2 samples, 0.18%)</title><rect x="87.5661%" y="405" width="0.1764%" height="15" fill="rgb(215,19,7)" fg:x="993" fg:w="2"/><text x="87.8161%" y="415.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.09%)</title><rect x="87.6543%" y="389" width="0.0882%" height="15" fill="rgb(238,81,41)" fg:x="994" fg:w="1"/><text x="87.9043%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="373" width="0.0882%" height="15" fill="rgb(210,199,37)" fg:x="994" fg:w="1"/><text x="87.9043%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="357" width="0.0882%" height="15" fill="rgb(244,192,49)" fg:x="994" fg:w="1"/><text x="87.9043%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="341" width="0.0882%" height="15" fill="rgb(226,211,11)" fg:x="994" fg:w="1"/><text x="87.9043%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="325" width="0.0882%" height="15" fill="rgb(236,162,54)" fg:x="994" fg:w="1"/><text x="87.9043%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="309" width="0.0882%" height="15" fill="rgb(220,229,9)" fg:x="994" fg:w="1"/><text x="87.9043%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="293" width="0.0882%" height="15" fill="rgb(250,87,22)" fg:x="994" fg:w="1"/><text x="87.9043%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="277" width="0.0882%" height="15" fill="rgb(239,43,17)" fg:x="994" fg:w="1"/><text x="87.9043%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="261" width="0.0882%" height="15" fill="rgb(231,177,25)" fg:x="994" fg:w="1"/><text x="87.9043%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="245" width="0.0882%" height="15" fill="rgb(219,179,1)" fg:x="994" fg:w="1"/><text x="87.9043%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="87.6543%" y="229" width="0.0882%" height="15" fill="rgb(238,219,53)" fg:x="994" fg:w="1"/><text x="87.9043%" y="239.50"></text></g><g><title>insertCell (13 samples, 1.15%)</title><rect x="87.7425%" y="421" width="1.1464%" height="15" fill="rgb(232,167,36)" fg:x="995" fg:w="13"/><text x="87.9925%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.18%)</title><rect x="88.7125%" y="405" width="0.1764%" height="15" fill="rgb(244,19,51)" fg:x="1006" fg:w="2"/><text x="88.9625%" y="415.50"></text></g><g><title>putVarint64 (5 samples, 0.44%)</title><rect x="88.8889%" y="421" width="0.4409%" height="15" fill="rgb(224,6,22)" fg:x="1008" fg:w="5"/><text x="89.1389%" y="431.50"></text></g><g><title>sqlite3BtreeInsert (61 samples, 5.38%)</title><rect x="84.2152%" y="437" width="5.3792%" height="15" fill="rgb(224,145,5)" fg:x="955" fg:w="61"/><text x="84.4652%" y="447.50">sqlite3..</text></g><g><title>sqlite3BtreeTableMoveto (3 samples, 0.26%)</title><rect x="89.3298%" y="421" width="0.2646%" height="15" fill="rgb(234,130,49)" fg:x="1013" fg:w="3"/><text x="89.5798%" y="431.50"></text></g><g><title>[csvtosql] (1 samples, 0.09%)</title><rect x="91.7108%" y="389" width="0.0882%" height="15" fill="rgb(254,6,2)" fg:x="1040" fg:w="1"/><text x="91.9608%" y="399.50"></text></g><g><title>___pthread_mutex_lock (4 samples, 0.35%)</title><rect x="91.7989%" y="389" width="0.3527%" height="15" fill="rgb(208,96,46)" fg:x="1041" fg:w="4"/><text x="92.0489%" y="399.50"></text></g><g><title>lll_mutex_lock_optimized (2 samples, 0.18%)</title><rect x="91.9753%" y="373" width="0.1764%" height="15" fill="rgb(239,3,39)" fg:x="1043" fg:w="2"/><text x="92.2253%" y="383.50"></text></g><g><title>___pthread_mutex_unlock (6 samples, 0.53%)</title><rect x="92.1517%" y="389" width="0.5291%" height="15" fill="rgb(233,210,1)" fg:x="1045" fg:w="6"/><text x="92.4017%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (3 samples, 0.26%)</title><rect x="92.4162%" y="373" width="0.2646%" height="15" fill="rgb(244,137,37)" fg:x="1048" fg:w="3"/><text x="92.6662%" y="383.50"></text></g><g><title>lll_mutex_unlock_optimized (1 samples, 0.09%)</title><rect x="92.5926%" y="357" width="0.0882%" height="15" fill="rgb(240,136,2)" fg:x="1050" fg:w="1"/><text x="92.8426%" y="367.50"></text></g><g><title>pthreadMutexEnter (1 samples, 0.09%)</title><rect x="92.6808%" y="389" width="0.0882%" height="15" fill="rgb(239,18,37)" fg:x="1051" fg:w="1"/><text x="92.9308%" y="399.50"></text></g><g><title>getPageNormal (30 samples, 2.65%)</title><rect x="90.2116%" y="421" width="2.6455%" height="15" fill="rgb(218,185,22)" fg:x="1023" fg:w="30"/><text x="90.4616%" y="431.50">ge..</text></g><g><title>pcache1Fetch (30 samples, 2.65%)</title><rect x="90.2116%" y="405" width="2.6455%" height="15" fill="rgb(225,218,4)" fg:x="1023" fg:w="30"/><text x="90.4616%" y="415.50">pc..</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.09%)</title><rect x="92.7690%" y="389" width="0.0882%" height="15" fill="rgb(230,182,32)" fg:x="1052" fg:w="1"/><text x="93.0190%" y="399.50"></text></g><g><title>___pthread_mutex_lock (3 samples, 0.26%)</title><rect x="94.1799%" y="357" width="0.2646%" height="15" fill="rgb(242,56,43)" fg:x="1068" fg:w="3"/><text x="94.4299%" y="367.50"></text></g><g><title>___pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="94.4444%" y="357" width="0.0882%" height="15" fill="rgb(233,99,24)" fg:x="1071" fg:w="1"/><text x="94.6944%" y="367.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="94.4444%" y="341" width="0.0882%" height="15" fill="rgb(234,209,42)" fg:x="1071" fg:w="1"/><text x="94.6944%" y="351.50"></text></g><g><title>sqlite3BtreeLast (57 samples, 5.03%)</title><rect x="89.5944%" y="437" width="5.0265%" height="15" fill="rgb(227,7,12)" fg:x="1016" fg:w="57"/><text x="89.8444%" y="447.50">sqlite..</text></g><g><title>moveToRoot (20 samples, 1.76%)</title><rect x="92.8571%" y="421" width="1.7637%" height="15" fill="rgb(245,203,43)" fg:x="1053" fg:w="20"/><text x="93.1071%" y="431.50"></text></g><g><title>getAndInitPage (19 samples, 1.68%)</title><rect x="92.9453%" y="405" width="1.6755%" height="15" fill="rgb(238,205,33)" fg:x="1054" fg:w="19"/><text x="93.1953%" y="415.50"></text></g><g><title>getPageNormal (16 samples, 1.41%)</title><rect x="93.2099%" y="389" width="1.4109%" height="15" fill="rgb(231,56,7)" fg:x="1057" fg:w="16"/><text x="93.4599%" y="399.50"></text></g><g><title>pcache1Fetch (14 samples, 1.23%)</title><rect x="93.3862%" y="373" width="1.2346%" height="15" fill="rgb(244,186,29)" fg:x="1059" fg:w="14"/><text x="93.6362%" y="383.50"></text></g><g><title>sqlite3_mutex_leave (1 samples, 0.09%)</title><rect x="94.5326%" y="357" width="0.0882%" height="15" fill="rgb(234,111,31)" fg:x="1072" fg:w="1"/><text x="94.7826%" y="367.50"></text></g><g><title>releaseMemArray.part.0 (14 samples, 1.23%)</title><rect x="95.8554%" y="421" width="1.2346%" height="15" fill="rgb(241,149,10)" fg:x="1087" fg:w="14"/><text x="96.1054%" y="431.50"></text></g><g><title>sqlite3VdbeHalt (44 samples, 3.88%)</title><rect x="94.6208%" y="437" width="3.8801%" height="15" fill="rgb(249,206,44)" fg:x="1073" fg:w="44"/><text x="94.8708%" y="447.50">sqli..</text></g><g><title>sqlite3VdbeFreeCursorNN (16 samples, 1.41%)</title><rect x="97.0899%" y="421" width="1.4109%" height="15" fill="rgb(251,153,30)" fg:x="1101" fg:w="16"/><text x="97.3399%" y="431.50"></text></g><g><title>btreeReleaseAllCursorPages.part.0 (13 samples, 1.15%)</title><rect x="97.3545%" y="405" width="1.1464%" height="15" fill="rgb(239,152,38)" fg:x="1104" fg:w="13"/><text x="97.6045%" y="415.50"></text></g><g><title>sqlite3PcacheRelease (9 samples, 0.79%)</title><rect x="97.7072%" y="389" width="0.7937%" height="15" fill="rgb(249,139,47)" fg:x="1108" fg:w="9"/><text x="97.9572%" y="399.50"></text></g><g><title>sqlite3VdbeExec (277 samples, 24.43%)</title><rect x="74.4268%" y="453" width="24.4268%" height="15" fill="rgb(244,64,35)" fg:x="844" fg:w="277"/><text x="74.6768%" y="463.50">sqlite3VdbeExec</text></g><g><title>sqlite3VdbeMemGrow (4 samples, 0.35%)</title><rect x="98.5009%" y="437" width="0.3527%" height="15" fill="rgb(216,46,15)" fg:x="1117" fg:w="4"/><text x="98.7509%" y="447.50"></text></g><g><title>sqlite3DbMallocRawNN (1 samples, 0.09%)</title><rect x="98.7654%" y="421" width="0.0882%" height="15" fill="rgb(250,74,19)" fg:x="1120" fg:w="1"/><text x="99.0154%" y="431.50"></text></g><g><title>__libc_start_main_impl (896 samples, 79.01%)</title><rect x="19.9295%" y="725" width="79.0123%" height="15" fill="rgb(249,42,33)" fg:x="226" fg:w="896"/><text x="20.1795%" y="735.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (896 samples, 79.01%)</title><rect x="19.9295%" y="709" width="79.0123%" height="15" fill="rgb(242,149,17)" fg:x="226" fg:w="896"/><text x="20.1795%" y="719.50">__libc_start_call_main</text></g><g><title>main (896 samples, 79.01%)</title><rect x="19.9295%" y="693" width="79.0123%" height="15" fill="rgb(244,29,21)" fg:x="226" fg:w="896"/><text x="20.1795%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (896 samples, 79.01%)</title><rect x="19.9295%" y="677" width="79.0123%" height="15" fill="rgb(220,130,37)" fg:x="226" fg:w="896"/><text x="20.1795%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (896 samples, 79.01%)</title><rect x="19.9295%" y="661" width="79.0123%" height="15" fill="rgb(211,67,2)" fg:x="226" fg:w="896"/><text x="20.1795%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (896 samples, 79.01%)</title><rect x="19.9295%" y="645" width="79.0123%" height="15" fill="rgb(235,68,52)" fg:x="226" fg:w="896"/><text x="20.1795%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (896 samples, 79.01%)</title><rect x="19.9295%" y="629" width="79.0123%" height="15" fill="rgb(246,142,3)" fg:x="226" fg:w="896"/><text x="20.1795%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (896 samples, 79.01%)</title><rect x="19.9295%" y="613" width="79.0123%" height="15" fill="rgb(241,25,7)" fg:x="226" fg:w="896"/><text x="20.1795%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (896 samples, 79.01%)</title><rect x="19.9295%" y="597" width="79.0123%" height="15" fill="rgb(242,119,39)" fg:x="226" fg:w="896"/><text x="20.1795%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (896 samples, 79.01%)</title><rect x="19.9295%" y="581" width="79.0123%" height="15" fill="rgb(241,98,45)" fg:x="226" fg:w="896"/><text x="20.1795%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (896 samples, 79.01%)</title><rect x="19.9295%" y="565" width="79.0123%" height="15" fill="rgb(254,28,30)" fg:x="226" fg:w="896"/><text x="20.1795%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (896 samples, 79.01%)</title><rect x="19.9295%" y="549" width="79.0123%" height="15" fill="rgb(241,142,54)" fg:x="226" fg:w="896"/><text x="20.1795%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (896 samples, 79.01%)</title><rect x="19.9295%" y="533" width="79.0123%" height="15" fill="rgb(222,85,15)" fg:x="226" fg:w="896"/><text x="20.1795%" y="543.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (896 samples, 79.01%)</title><rect x="19.9295%" y="517" width="79.0123%" height="15" fill="rgb(210,85,47)" fg:x="226" fg:w="896"/><text x="20.1795%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>csvtosql::main (896 samples, 79.01%)</title><rect x="19.9295%" y="501" width="79.0123%" height="15" fill="rgb(224,206,25)" fg:x="226" fg:w="896"/><text x="20.1795%" y="511.50">csvtosql::main</text></g><g><title>rusqlite::statement::Statement::execute_with_bound_parameters (287 samples, 25.31%)</title><rect x="73.6332%" y="485" width="25.3086%" height="15" fill="rgb(243,201,19)" fg:x="835" fg:w="287"/><text x="73.8832%" y="495.50">rusqlite::statement::Statement::execute_..</text></g><g><title>sqlite3_step (283 samples, 24.96%)</title><rect x="73.9859%" y="469" width="24.9559%" height="15" fill="rgb(236,59,4)" fg:x="839" fg:w="283"/><text x="74.2359%" y="479.50">sqlite3_step</text></g><g><title>sqlite3_mutex_leave (1 samples, 0.09%)</title><rect x="98.8536%" y="453" width="0.0882%" height="15" fill="rgb(254,179,45)" fg:x="1121" fg:w="1"/><text x="99.1036%" y="463.50"></text></g><g><title>_start (897 samples, 79.10%)</title><rect x="19.9295%" y="741" width="79.1005%" height="15" fill="rgb(226,14,10)" fg:x="226" fg:w="897"/><text x="20.1795%" y="751.50">_start</text></g><g><title>_dl_start (1 samples, 0.09%)</title><rect x="98.9418%" y="725" width="0.0882%" height="15" fill="rgb(244,27,41)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="735.50"></text></g><g><title>_dl_start_final (1 samples, 0.09%)</title><rect x="98.9418%" y="709" width="0.0882%" height="15" fill="rgb(235,35,32)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="719.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.09%)</title><rect x="98.9418%" y="693" width="0.0882%" height="15" fill="rgb(218,68,31)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="703.50"></text></g><g><title>dl_main (1 samples, 0.09%)</title><rect x="98.9418%" y="677" width="0.0882%" height="15" fill="rgb(207,120,37)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="687.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.09%)</title><rect x="98.9418%" y="661" width="0.0882%" height="15" fill="rgb(227,98,0)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="671.50"></text></g><g><title>elf_machine_runtime_setup (1 samples, 0.09%)</title><rect x="98.9418%" y="645" width="0.0882%" height="15" fill="rgb(207,7,3)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="629" width="0.0882%" height="15" fill="rgb(206,98,19)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="613" width="0.0882%" height="15" fill="rgb(217,5,26)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="597" width="0.0882%" height="15" fill="rgb(235,190,38)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="581" width="0.0882%" height="15" fill="rgb(247,86,24)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="565" width="0.0882%" height="15" fill="rgb(205,101,16)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="549" width="0.0882%" height="15" fill="rgb(246,168,33)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="533" width="0.0882%" height="15" fill="rgb(231,114,1)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="517" width="0.0882%" height="15" fill="rgb(207,184,53)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="501" width="0.0882%" height="15" fill="rgb(224,95,51)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="485" width="0.0882%" height="15" fill="rgb(212,188,45)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="469" width="0.0882%" height="15" fill="rgb(223,154,38)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.09%)</title><rect x="98.9418%" y="453" width="0.0882%" height="15" fill="rgb(251,22,52)" fg:x="1122" fg:w="1"/><text x="99.1918%" y="463.50"></text></g><g><title>anon.60d6c8cbc5d60c14965c0370358260d7.51.llvm.3910233557173838983 (1 samples, 0.09%)</title><rect x="99.0300%" y="741" width="0.0882%" height="15" fill="rgb(229,209,22)" fg:x="1123" fg:w="1"/><text x="99.2800%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="99.0300%" y="725" width="0.0882%" height="15" fill="rgb(234,138,34)" fg:x="1123" fg:w="1"/><text x="99.2800%" y="735.50"></text></g><g><title>csvtosql::main (1 samples, 0.09%)</title><rect x="99.1182%" y="741" width="0.0882%" height="15" fill="rgb(212,95,11)" fg:x="1124" fg:w="1"/><text x="99.3682%" y="751.50"></text></g><g><title>insertCell (2 samples, 0.18%)</title><rect x="99.2063%" y="741" width="0.1764%" height="15" fill="rgb(240,179,47)" fg:x="1125" fg:w="2"/><text x="99.4563%" y="751.50"></text></g><g><title>releaseMemArray.part.0 (1 samples, 0.09%)</title><rect x="99.3827%" y="741" width="0.0882%" height="15" fill="rgb(240,163,11)" fg:x="1127" fg:w="1"/><text x="99.6327%" y="751.50"></text></g><g><title>csvtosql (1,129 samples, 99.56%)</title><rect x="0.0000%" y="757" width="99.5591%" height="15" fill="rgb(236,37,12)" fg:x="0" fg:w="1129"/><text x="0.2500%" y="767.50">csvtosql</text></g><g><title>rusqlite::str_for_sqlite (1 samples, 0.09%)</title><rect x="99.4709%" y="741" width="0.0882%" height="15" fill="rgb(232,164,16)" fg:x="1128" fg:w="1"/><text x="99.7209%" y="751.50"></text></g><g><title>all (1,134 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(244,205,15)" fg:x="0" fg:w="1134"/><text x="0.2500%" y="783.50"></text></g><g><title>perf-exec (5 samples, 0.44%)</title><rect x="99.5591%" y="757" width="0.4409%" height="15" fill="rgb(223,117,47)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="741" width="0.4409%" height="15" fill="rgb(244,107,35)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="725" width="0.4409%" height="15" fill="rgb(205,140,8)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="709" width="0.4409%" height="15" fill="rgb(228,84,46)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="693" width="0.4409%" height="15" fill="rgb(254,188,9)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="677" width="0.4409%" height="15" fill="rgb(206,112,54)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="661" width="0.4409%" height="15" fill="rgb(216,84,49)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="645" width="0.4409%" height="15" fill="rgb(214,194,35)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="629" width="0.4409%" height="15" fill="rgb(249,28,3)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="613" width="0.4409%" height="15" fill="rgb(222,56,52)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="597" width="0.4409%" height="15" fill="rgb(245,217,50)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="581" width="0.4409%" height="15" fill="rgb(213,201,24)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="565" width="0.4409%" height="15" fill="rgb(248,116,28)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="549" width="0.4409%" height="15" fill="rgb(219,72,43)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="533" width="0.4409%" height="15" fill="rgb(209,138,14)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.44%)</title><rect x="99.5591%" y="517" width="0.4409%" height="15" fill="rgb(222,18,33)" fg:x="1129" fg:w="5"/><text x="99.8091%" y="527.50"></text></g></svg></svg>